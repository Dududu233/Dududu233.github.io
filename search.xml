<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>记一次平平无奇的作业/练习markdown语法/决策树算法和模型评估标准</title>
      <link href="/2021/10/30/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%B9%B3%E5%B9%B3%E6%97%A0%E5%A5%87%E7%9A%84%E4%BD%9C%E4%B8%9A/"/>
      <url>/2021/10/30/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%B9%B3%E5%B9%B3%E6%97%A0%E5%A5%87%E7%9A%84%E4%BD%9C%E4%B8%9A/</url>
      
        <content type="html"><![CDATA[<p>记一次平平无奇的数据挖掘课的作业。<br>顺便也是练习使用markdown语法。<br>作业题：<br><img src="/images/10_30_21_1_1.jpg" alt="第一页" title="我是第一页"><br><img src="/images/10_30_21_1_2.jpg" alt="第二页" title="我是第二页"><br><img src="/images/10_30_21_1_3.jpg" alt="第三页" title="我是第三页"><br><img src="/images/10_30_21_1_4.jpg" alt="第四页" title="我是第四页"></p><p>作业：<br>#第五章</p><p>###第一题<br>决策树是一种很常见的机器学习方法。常常用在样本的对象和属性值一一对应时；目标函数有离散的输出值；可能需要析取假设；训练数据集中可能有噪声或者样本中含有缺失属性值的情况下。</p><p>###第二题</p><p>剪枝处理是决策树学习算法解决过拟合的主要手段。决策树剪枝的基本策略可分为预剪枝和后剪枝。<br>预剪枝是指在决策树生成的过程中，对每个结点在划分前进行估计，若当前节点的划分不能带来决策树泛化性能的提升，则停止划分并将当前节点标记为叶结点。<br>后剪枝则是先从训练集生成一颗完整的决策树，然后自底向上的对非叶结点进行考察。若当前结点对应的子树替换为叶结点能带来决策树泛化性能的提升，则将该子节点替换为叶结点。<br>###第三题<br>缺失值将从三个方向给决策树的构建带来影响：</p><ul><li>在训练样本属性缺失的情况下，无法进行划分属性的选择</li><li>给定划分属性，若样本在该属性上的值是缺失的，导致无法对此样本进行划分</li><li>测试样本中属性有缺失值，可能导致测试出错<br>###第四题<br>####优点</li><li>决策树学习为概念学习和其他离散值函数的学习提供了一种可供实践的方法。</li><li>具有可解释性，能够在相当短的时间内对大型的数据源做出可行且效果良好的结果，决策树分类的效率高。只需要进行一次构建，即可反复使用。</li><li>易于通过静态测试来对模型进行评测，可以测定模型可信度；如果给定一个观察的模型，那么根据所产生的决策树很容易推出相应的逻辑表达式。</li></ul><p>####分类过程中可能出现的问题</p><ul><li>在决策树分类的过程中，很经常出现的一个问题就是过拟合问题。在决策树构建的过程中，为了尽可能正确的分类学习样本，常常会不断地对结点进行划分，导致决策树的分支过多，可能会导致错误的将样本集的一些特征当作所有数据都具有的特征从而出现过拟合问题。<br>###第五题</li></ul><p>集合中共含有十五个样本，其中6个拒绝，9个接受,计算集合的信息熵：<br>$$Ent=-\sum_{k=1}^{y}p_klog_2p_k=-\frac{6}{15}log_2\frac{6}{15}-\frac{9}{15}log_2\frac{9}{15}=0.97 $$<br>以属性“年龄”对集合进行划分，得到三个子集：$D^1(年龄=青年)，D^2(年龄=中年)，D^3(年龄=老年)$，分别计算三个子集的信息熵：<br>$$Ent(D^1)=-\frac{3}{5}log_2\frac{3}{5}-\frac{2}{5}log_2\frac{2}{5}=0.97$$<br>$$Ent(D^2)=-\frac{3}{5}log_2\frac{3}{5}-\frac{2}{5}log_2\frac{2}{5}=0.97$$<br>$$Ent(D^3)=-\frac{4}{5}log_2\frac{4}{5}-\frac{1}{5}log_2\frac{1}{5}=0.721$$<br>由信息增益的计算公式，计算属性年龄对样本集$D$进行划分的信息增益：<br>$$\begin{aligned}<br>Gain(D,年龄)&amp;=Ent(D)-\sum_{v=1}^{V}\frac{\lvert D^v \rvert}{\lvert D \rvert}Ent(D^v)\<br>&amp;=0.97-(\frac{1}{3}\times0.97+\frac{1}{3}\times0.97+\frac{1}{3}\times0.721)\<br>&amp;=0.089<br>\end{aligned}$$<br>相似的，分别求取以工作情况划分样本集时，以房产情况划分样本集时，以信贷情况划分样本集时的信息增益：<br>$$Gain(D,工作情况)=0.97-\frac{10}{15}\times0.97=0.33$$<br>$$Gain(D,房产情况)=0.97-\frac{9}{15}\times0.917=0.419$$<br>$$Gain(D,信贷情况)=0.97-\frac{5}{15}\times0.721-\frac{6}{15}\times0.917=0.362$$<br>比较可得，房产情况为最优特征。</p><p>###第六题</p><p>由上文第五题的求解，确定使用房产情况为根结点；</p><pre class=" language-mermaid"><code class="language-mermaid">graph TB A[房产情况] B[有] C[无] D[同意] E[其他情况] A-->B A-->C B-->D C-->E</code></pre><p>此时，有房产的样本已经到达叶节点；将无房产的样本单独划分为一个集合，共有九个样本，首先计算该子样本集的信息熵：<br>$$Ent(D_1)=-\sum_{k=1}^{\lvert \gamma \rvert}p_klog_{2}p_k=-\frac{6}{9}log_2\frac{6}{9}-\frac{3}{9}log_2\frac{3}{9}=0.917$$<br>分别计算其他属性对于子样本集的信息增益：<br>$$Gain(D_1|年龄)=Ent(D_1)-\sum_{v=1}^{V}\frac{\lvert D^v_1 \rvert}{\lvert D_1 \rvert}Ent(D^v_1)=0.917-0.36-0.305=0.252\<br>Gain(D_1|工作)=Ent(D_1)-\sum_{v=1}^{V}\frac{\lvert D^v_1 \rvert}{\lvert D_1 \rvert}Ent(D^v_1)=0.917-0=0.917\<br>Gain(D_1|信贷)=Ent(D_1)-\sum_{v=1}^{V}\frac{\lvert D^v_1 \rvert}{\lvert D_1 \rvert}Ent(D^v_1)=0.917-\frac{4}{9}=0.472$$<br>此时：工作情况为最优特征，决策树构建为；</p><pre class=" language-mermaid"><code class="language-mermaid">graph TB A[房产情况] B[有] C[无] D[同意] E[工作情况] F[有工作]-->FF[同意] G[无工作]-->GG[拒绝] A-->B A-->C B-->D C-->E E-->F E-->G</code></pre><p>###第七题<br>python源代码：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#ID3算法</span><span class="token keyword">import</span> math<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> matplotlib<span class="token punctuation">.</span>pylab <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> treePlotter <span class="token keyword">import</span> createPlot<span class="token keyword">def</span> <span class="token function">calcShannonent</span><span class="token punctuation">(</span>dataset<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#计算信息熵</span>    numEntries<span class="token operator">=</span>len<span class="token punctuation">(</span>dataset<span class="token punctuation">)</span>    labelCounts<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span>    <span class="token keyword">for</span> featVec <span class="token keyword">in</span> dataset<span class="token punctuation">:</span>        currentLabel <span class="token operator">=</span> featVec<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#判断这个标签在字典中是否存在，不存在就初始化</span>        <span class="token keyword">if</span> currentLabel <span class="token operator">not</span> <span class="token keyword">in</span> labelCounts<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            labelCounts<span class="token punctuation">[</span>currentLabel<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment" spellcheck="true">#统计不同类别的数量</span>        labelCounts<span class="token punctuation">[</span>currentLabel<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true">#初始化熵</span>    shannonent <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token comment" spellcheck="true">#计算熵</span>    <span class="token keyword">for</span> key <span class="token keyword">in</span> labelCounts<span class="token punctuation">:</span>        prob <span class="token operator">=</span> float<span class="token punctuation">(</span>labelCounts<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span>numEntries        shannonent <span class="token operator">-=</span> prob <span class="token operator">*</span> math<span class="token punctuation">.</span>log<span class="token punctuation">(</span>prob<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> shannonent<span class="token keyword">def</span> <span class="token function">SubDataset</span><span class="token punctuation">(</span>dataset<span class="token punctuation">,</span>index<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#从总的数据集中选取出关心的数据组成新的数据集</span>    sub_dataset <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> example <span class="token keyword">in</span> dataset<span class="token punctuation">:</span>        current_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> example<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> value<span class="token punctuation">:</span>            current_list <span class="token operator">=</span> example<span class="token punctuation">[</span><span class="token punctuation">:</span>index<span class="token punctuation">]</span>            current_list<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>example<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            sub_dataset<span class="token punctuation">.</span>append<span class="token punctuation">(</span>current_list<span class="token punctuation">)</span>    <span class="token keyword">return</span> sub_dataset<span class="token keyword">def</span> <span class="token function">ChooseBestFeature</span><span class="token punctuation">(</span>dataset<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#选择最优特征</span>    num_features<span class="token operator">=</span>len<span class="token punctuation">(</span>dataset<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>    current_Ent<span class="token operator">=</span>calcShannonent<span class="token punctuation">(</span>dataset<span class="token punctuation">)</span>    bestFeatureGain<span class="token operator">=</span><span class="token number">0.0</span>    bestFeatureIndex<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>num_features<span class="token punctuation">)</span><span class="token punctuation">:</span>        values_features<span class="token operator">=</span><span class="token punctuation">[</span>example<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> example <span class="token keyword">in</span> dataset<span class="token punctuation">]</span>        unique_value<span class="token operator">=</span>set<span class="token punctuation">(</span>values_features<span class="token punctuation">)</span>        new_ent<span class="token operator">=</span><span class="token number">0.0</span>        Gain<span class="token operator">=</span><span class="token number">0.0</span>        <span class="token keyword">for</span> value <span class="token keyword">in</span> unique_value<span class="token punctuation">:</span>            sub_dataset<span class="token operator">=</span>SubDataset<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span>i<span class="token punctuation">,</span>value<span class="token punctuation">)</span>            p<span class="token operator">=</span>len<span class="token punctuation">(</span>sub_dataset<span class="token punctuation">)</span><span class="token operator">/</span>len<span class="token punctuation">(</span>dataset<span class="token punctuation">)</span>            new_ent <span class="token operator">+=</span>p<span class="token operator">*</span>calcShannonent<span class="token punctuation">(</span>sub_dataset<span class="token punctuation">)</span>            Gain<span class="token operator">=</span>calcShannonent<span class="token punctuation">(</span>dataset<span class="token punctuation">)</span><span class="token operator">-</span>new_ent        <span class="token keyword">if</span><span class="token punctuation">(</span>Gain<span class="token operator">></span>bestFeatureGain<span class="token punctuation">)</span><span class="token punctuation">:</span>            bestFeatureGain<span class="token operator">=</span>Gain            bestFeatureIndex<span class="token operator">=</span>i    <span class="token keyword">return</span> bestFeatureIndex       <span class="token keyword">return</span> <span class="token keyword">def</span> <span class="token function">TreeGenerate</span><span class="token punctuation">(</span>dataset<span class="token punctuation">,</span>feature<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#通过递归调用创建决策树</span>    label_list<span class="token operator">=</span><span class="token punctuation">[</span>example<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> example <span class="token keyword">in</span> dataset<span class="token punctuation">]</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>label_list<span class="token punctuation">.</span>count<span class="token punctuation">(</span>label_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span>len<span class="token punctuation">(</span>label_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#设置递归结束条件，类别中所有的标签都相同时，递归结束，返回一个叶节点</span>        <span class="token keyword">return</span> label_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        best_index<span class="token operator">=</span>ChooseBestFeature<span class="token punctuation">(</span>dataset<span class="token punctuation">)</span>    best_feature<span class="token operator">=</span>feature<span class="token punctuation">[</span>best_index<span class="token punctuation">]</span>    decisionTree<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;best_feature:&amp;#123;&amp;#125;&amp;#125;</span>    <span class="token keyword">del</span><span class="token punctuation">(</span>feature<span class="token punctuation">[</span>best_index<span class="token punctuation">]</span><span class="token punctuation">)</span>    values_best_feature<span class="token operator">=</span><span class="token punctuation">[</span>example<span class="token punctuation">[</span>best_index<span class="token punctuation">]</span> <span class="token keyword">for</span> example <span class="token keyword">in</span> dataset<span class="token punctuation">]</span>    dict_value<span class="token operator">=</span>set<span class="token punctuation">(</span>values_best_feature<span class="token punctuation">)</span>    <span class="token keyword">for</span> value <span class="token keyword">in</span> dict_value<span class="token punctuation">:</span>        new_feature<span class="token operator">=</span>feature        decisionTree<span class="token punctuation">[</span>best_feature<span class="token punctuation">]</span><span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token operator">=</span>TreeGenerate<span class="token punctuation">(</span>SubDataset<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span>best_index<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span>new_feature<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#递归调用自身不断生成子树</span>        <span class="token keyword">return</span> decisionTree<span class="token keyword">def</span> <span class="token function">GenerateDataset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     dataset <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'青年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'一般般'</span><span class="token punctuation">,</span> <span class="token string">'拒绝'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'青年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'好'</span><span class="token punctuation">,</span> <span class="token string">'拒绝'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'青年'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'好'</span><span class="token punctuation">,</span> <span class="token string">'同意'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'青年'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'一般般'</span><span class="token punctuation">,</span> <span class="token string">'同意'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'青年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'一般般'</span><span class="token punctuation">,</span> <span class="token string">'拒绝'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'中年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'一般般'</span><span class="token punctuation">,</span> <span class="token string">'拒绝'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'中年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'好'</span><span class="token punctuation">,</span> <span class="token string">'拒绝'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'中年'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'好'</span><span class="token punctuation">,</span> <span class="token string">'同意'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'中年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'非常好'</span><span class="token punctuation">,</span> <span class="token string">'同意'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'中年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'非常好'</span><span class="token punctuation">,</span> <span class="token string">'同意'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'老年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'非常好'</span><span class="token punctuation">,</span> <span class="token string">'同意'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'老年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'好'</span><span class="token punctuation">,</span> <span class="token string">'同意'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'老年'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'好'</span><span class="token punctuation">,</span> <span class="token string">'同意'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'老年'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'非常好'</span><span class="token punctuation">,</span> <span class="token string">'同意'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'老年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'一般般'</span><span class="token punctuation">,</span> <span class="token string">'拒绝'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    features <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'年龄'</span><span class="token punctuation">,</span> <span class="token string">'有工作'</span><span class="token punctuation">,</span> <span class="token string">'有房子'</span><span class="token punctuation">,</span> <span class="token string">'信贷情况'</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> dataset<span class="token punctuation">,</span> features<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    dataset<span class="token punctuation">,</span>feature<span class="token operator">=</span>GenerateDataset<span class="token punctuation">(</span><span class="token punctuation">)</span>    decision_tree<span class="token operator">=</span>TreeGenerate<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span>feature<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>decision_tree<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 定义文本框和箭头格式</span>    decisionNode <span class="token operator">=</span> dict<span class="token punctuation">(</span>boxstyle<span class="token operator">=</span><span class="token string">"round4"</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'#3366FF'</span><span class="token punctuation">)</span>  #定义判断结点形态    leafNode <span class="token operator">=</span> dict<span class="token punctuation">(</span>boxstyle<span class="token operator">=</span><span class="token string">"circle"</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'#FF6633'</span><span class="token punctuation">)</span>  #定义叶结点形态    arrow_args <span class="token operator">=</span> dict<span class="token punctuation">(</span>arrowstyle<span class="token operator">=</span><span class="token string">"&lt;-"</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'g'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#定义箭头</span>    mpl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 指定默认字体</span>    mpl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>  <span class="token comment" spellcheck="true"># 解决保存图像时负号'-'显示为方块的问题</span>    createPlot<span class="token punctuation">(</span>decision_tree<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#绘制决策树</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment" spellcheck="true"># 定义文本框和箭头格式</span>decisionNode <span class="token operator">=</span> dict<span class="token punctuation">(</span>boxstyle<span class="token operator">=</span><span class="token string">"round4"</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'#3366FF'</span><span class="token punctuation">)</span>  #定义判断结点形态leafNode <span class="token operator">=</span> dict<span class="token punctuation">(</span>boxstyle<span class="token operator">=</span><span class="token string">"circle"</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'#FF6633'</span><span class="token punctuation">)</span>  #定义叶结点形态arrow_args <span class="token operator">=</span> dict<span class="token punctuation">(</span>arrowstyle<span class="token operator">=</span><span class="token string">"&lt;-"</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'g'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#定义箭头</span><span class="token comment" spellcheck="true">#绘制带箭头的注释</span><span class="token keyword">def</span> <span class="token function">plotNode</span><span class="token punctuation">(</span>nodeTxt<span class="token punctuation">,</span> centerPt<span class="token punctuation">,</span> parentPt<span class="token punctuation">,</span> nodeType<span class="token punctuation">)</span><span class="token punctuation">:</span>    createPlot<span class="token punctuation">.</span>ax1<span class="token punctuation">.</span>annotate<span class="token punctuation">(</span>nodeTxt<span class="token punctuation">,</span> xy<span class="token operator">=</span>parentPt<span class="token punctuation">,</span> xycoords<span class="token operator">=</span><span class="token string">'axes fraction'</span><span class="token punctuation">,</span>                            xytext<span class="token operator">=</span>centerPt<span class="token punctuation">,</span> textcoords<span class="token operator">=</span><span class="token string">'axes fraction'</span><span class="token punctuation">,</span>                            va<span class="token operator">=</span><span class="token string">"center"</span><span class="token punctuation">,</span> ha<span class="token operator">=</span><span class="token string">"center"</span><span class="token punctuation">,</span> bbox<span class="token operator">=</span>nodeType<span class="token punctuation">,</span> arrowprops<span class="token operator">=</span>arrow_args<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#计算叶结点数</span><span class="token keyword">def</span> <span class="token function">getNumLeafs</span><span class="token punctuation">(</span>myTree<span class="token punctuation">)</span><span class="token punctuation">:</span>    numLeafs <span class="token operator">=</span> <span class="token number">0</span>    firstStr <span class="token operator">=</span> list<span class="token punctuation">(</span>myTree<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    secondDict <span class="token operator">=</span> myTree<span class="token punctuation">[</span>firstStr<span class="token punctuation">]</span>    <span class="token keyword">for</span> key <span class="token keyword">in</span> secondDict<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> type<span class="token punctuation">(</span>secondDict<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__name__ <span class="token operator">==</span> <span class="token string">'dict'</span><span class="token punctuation">:</span>            numLeafs <span class="token operator">+=</span> getNumLeafs<span class="token punctuation">(</span>secondDict<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            numLeafs <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> numLeafs<span class="token comment" spellcheck="true">#计算树的层数</span><span class="token keyword">def</span> <span class="token function">getTreeDepth</span><span class="token punctuation">(</span>myTree<span class="token punctuation">)</span><span class="token punctuation">:</span>    maxDepth <span class="token operator">=</span> <span class="token number">0</span>    firstStr <span class="token operator">=</span> list<span class="token punctuation">(</span>myTree<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    secondDict <span class="token operator">=</span> myTree<span class="token punctuation">[</span>firstStr<span class="token punctuation">]</span>    <span class="token keyword">for</span> key <span class="token keyword">in</span> secondDict<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> type<span class="token punctuation">(</span>secondDict<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__name__ <span class="token operator">==</span> <span class="token string">'dict'</span><span class="token punctuation">:</span>            thisDepth <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> getTreeDepth<span class="token punctuation">(</span>secondDict<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            thisDepth <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">if</span> thisDepth <span class="token operator">></span> maxDepth<span class="token punctuation">:</span>            maxDepth <span class="token operator">=</span> thisDepth    <span class="token keyword">return</span> maxDepth<span class="token comment" spellcheck="true">#在父子结点间填充文本信息</span><span class="token keyword">def</span> <span class="token function">plotMidText</span><span class="token punctuation">(</span>cntrPt<span class="token punctuation">,</span> parentPt<span class="token punctuation">,</span> txtString<span class="token punctuation">)</span><span class="token punctuation">:</span>    xMid <span class="token operator">=</span> <span class="token punctuation">(</span>parentPt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> cntrPt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span> <span class="token operator">+</span> cntrPt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    yMid <span class="token operator">=</span> <span class="token punctuation">(</span>parentPt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> cntrPt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span> <span class="token operator">+</span> cntrPt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    createPlot<span class="token punctuation">.</span>ax1<span class="token punctuation">.</span>text<span class="token punctuation">(</span>xMid<span class="token punctuation">,</span> yMid<span class="token punctuation">,</span> txtString<span class="token punctuation">,</span> va<span class="token operator">=</span><span class="token string">"center"</span><span class="token punctuation">,</span> ha<span class="token operator">=</span><span class="token string">"center"</span><span class="token punctuation">,</span> rotation<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">plotTree</span><span class="token punctuation">(</span>myTree<span class="token punctuation">,</span> parentPt<span class="token punctuation">,</span> nodeTxt<span class="token punctuation">)</span><span class="token punctuation">:</span>    numLeafs <span class="token operator">=</span> getNumLeafs<span class="token punctuation">(</span>myTree<span class="token punctuation">)</span>    depth <span class="token operator">=</span> getTreeDepth<span class="token punctuation">(</span>myTree<span class="token punctuation">)</span>    firstStr <span class="token operator">=</span> list<span class="token punctuation">(</span>myTree<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    cntrPt <span class="token operator">=</span> <span class="token punctuation">(</span>plotTree<span class="token punctuation">.</span>xOff <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">+</span> float<span class="token punctuation">(</span>numLeafs<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span> <span class="token operator">/</span> plotTree<span class="token punctuation">.</span>totalW<span class="token punctuation">,</span> plotTree<span class="token punctuation">.</span>yOff<span class="token punctuation">)</span>    plotMidText<span class="token punctuation">(</span>cntrPt<span class="token punctuation">,</span> parentPt<span class="token punctuation">,</span> nodeTxt<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#在父子结点间填充文本信息</span>    plotNode<span class="token punctuation">(</span>firstStr<span class="token punctuation">,</span> cntrPt<span class="token punctuation">,</span> parentPt<span class="token punctuation">,</span> decisionNode<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#绘制带箭头的注释</span>    secondDict <span class="token operator">=</span> myTree<span class="token punctuation">[</span>firstStr<span class="token punctuation">]</span>    plotTree<span class="token punctuation">.</span>yOff <span class="token operator">=</span> plotTree<span class="token punctuation">.</span>yOff <span class="token operator">-</span> <span class="token number">1.0</span> <span class="token operator">/</span> plotTree<span class="token punctuation">.</span>totalD    <span class="token keyword">for</span> key <span class="token keyword">in</span> secondDict<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> type<span class="token punctuation">(</span>secondDict<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__name__ <span class="token operator">==</span> <span class="token string">'dict'</span><span class="token punctuation">:</span>            plotTree<span class="token punctuation">(</span>secondDict<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> cntrPt<span class="token punctuation">,</span> str<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            plotTree<span class="token punctuation">.</span>xOff <span class="token operator">=</span> plotTree<span class="token punctuation">.</span>xOff <span class="token operator">+</span> <span class="token number">1.0</span> <span class="token operator">/</span> plotTree<span class="token punctuation">.</span>totalW            plotNode<span class="token punctuation">(</span>secondDict<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>plotTree<span class="token punctuation">.</span>xOff<span class="token punctuation">,</span> plotTree<span class="token punctuation">.</span>yOff<span class="token punctuation">)</span><span class="token punctuation">,</span> cntrPt<span class="token punctuation">,</span> leafNode<span class="token punctuation">)</span>            plotMidText<span class="token punctuation">(</span><span class="token punctuation">(</span>plotTree<span class="token punctuation">.</span>xOff<span class="token punctuation">,</span> plotTree<span class="token punctuation">.</span>yOff<span class="token punctuation">)</span><span class="token punctuation">,</span> cntrPt<span class="token punctuation">,</span> str<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>    plotTree<span class="token punctuation">.</span>yOff <span class="token operator">=</span> plotTree<span class="token punctuation">.</span>yOff <span class="token operator">+</span> <span class="token number">1.0</span> <span class="token operator">/</span> plotTree<span class="token punctuation">.</span>totalD<span class="token keyword">def</span> <span class="token function">createPlot</span><span class="token punctuation">(</span>inTree<span class="token punctuation">)</span><span class="token punctuation">:</span>    fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> facecolor<span class="token operator">=</span><span class="token string">'white'</span><span class="token punctuation">)</span>    fig<span class="token punctuation">.</span>clf<span class="token punctuation">(</span><span class="token punctuation">)</span>    axprops <span class="token operator">=</span> dict<span class="token punctuation">(</span>xticks<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> yticks<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    createPlot<span class="token punctuation">.</span>ax1 <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">,</span> frameon<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token operator">**</span>axprops<span class="token punctuation">)</span>    plotTree<span class="token punctuation">.</span>totalW <span class="token operator">=</span> float<span class="token punctuation">(</span>getNumLeafs<span class="token punctuation">(</span>inTree<span class="token punctuation">)</span><span class="token punctuation">)</span>    plotTree<span class="token punctuation">.</span>totalD <span class="token operator">=</span> float<span class="token punctuation">(</span>getTreeDepth<span class="token punctuation">(</span>inTree<span class="token punctuation">)</span><span class="token punctuation">)</span>    plotTree<span class="token punctuation">.</span>xOff <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0.5</span> <span class="token operator">/</span> plotTree<span class="token punctuation">.</span>totalW    plotTree<span class="token punctuation">.</span>yOff <span class="token operator">=</span> <span class="token number">1.0</span>    plotTree<span class="token punctuation">(</span>inTree<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>程序运行结果：<img src="D:/py_workspace/homework/DecisionTree/1.png" alt="ID3算法运行控制台输出" title="ID3算法运行控制台输出"><br>绘制出的决策树：<img src="D:/py_workspace/homework/DecisionTree/2.png" alt="决策树" title="使用matplotlib绘制的决策树"><br>###第八题<br>python源代码：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#相较于ID3算法，CART算法并无本质上的区别，只是将选择最优特征的根据改为基尼系数</span><span class="token comment" spellcheck="true">#因此，修改原ID3算法中的计算信息熵函数为计算基尼系数函数，并同步修改选择最优特征函数即可</span><span class="token keyword">import</span> math<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> matplotlib<span class="token punctuation">.</span>pylab <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> treePlotter <span class="token keyword">import</span> createPlot<span class="token keyword">def</span> <span class="token function">calcGini</span><span class="token punctuation">(</span>dataSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    numEntries <span class="token operator">=</span> len<span class="token punctuation">(</span>dataSet<span class="token punctuation">)</span>    labelCounts <span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span>     <span class="token keyword">for</span> featVec <span class="token keyword">in</span> dataSet<span class="token punctuation">:</span>        currentLabel <span class="token operator">=</span> featVec<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> currentLabel <span class="token operator">not</span> <span class="token keyword">in</span> labelCounts<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            labelCounts<span class="token punctuation">[</span>currentLabel<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token number">0</span>        labelCounts<span class="token punctuation">[</span>currentLabel<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span>    Gini <span class="token operator">=</span><span class="token number">1.0</span>    <span class="token keyword">for</span> key <span class="token keyword">in</span> labelCounts<span class="token punctuation">:</span>        prob <span class="token operator">=</span> float<span class="token punctuation">(</span>labelCounts<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span>numEntries        Gini <span class="token operator">-=</span> prob <span class="token operator">*</span> prob    <span class="token keyword">return</span> Gini    <span class="token keyword">def</span> <span class="token function">SubDataset</span><span class="token punctuation">(</span>dataset<span class="token punctuation">,</span>index<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#从总的数据集中选取出关心的数据组成新的数据集</span>    sub_dataset <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> example <span class="token keyword">in</span> dataset<span class="token punctuation">:</span>        current_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> example<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> value<span class="token punctuation">:</span>            current_list <span class="token operator">=</span> example<span class="token punctuation">[</span><span class="token punctuation">:</span>index<span class="token punctuation">]</span>            current_list<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>example<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            sub_dataset<span class="token punctuation">.</span>append<span class="token punctuation">(</span>current_list<span class="token punctuation">)</span>    <span class="token keyword">return</span> sub_dataset<span class="token keyword">def</span> <span class="token function">splitOtherDataSetByValue</span><span class="token punctuation">(</span>dataSet<span class="token punctuation">,</span> index<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>    retDataSet <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> featVec <span class="token keyword">in</span> dataSet<span class="token punctuation">:</span>        <span class="token keyword">if</span> featVec<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">!=</span> value<span class="token punctuation">:</span>            reduceFeatVec <span class="token operator">=</span> featVec<span class="token punctuation">[</span><span class="token punctuation">:</span>index<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 删除这一维特征</span>            reduceFeatVec<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>featVec<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            retDataSet<span class="token punctuation">.</span>append<span class="token punctuation">(</span>reduceFeatVec<span class="token punctuation">)</span>    <span class="token keyword">return</span> retDataSet<span class="token keyword">def</span> <span class="token function">ChooseBestFeature</span><span class="token punctuation">(</span>dataSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    numFeatures <span class="token operator">=</span> len<span class="token punctuation">(</span>dataSet<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span>    bestGiniIndex <span class="token operator">=</span> <span class="token number">1000000.0</span>    bestSplictValue <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    bestFeature <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token comment" spellcheck="true"># 计算Gini指数</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>numFeatures<span class="token punctuation">)</span><span class="token punctuation">:</span>        featList <span class="token operator">=</span> <span class="token punctuation">[</span>example<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> example <span class="token keyword">in</span> dataSet<span class="token punctuation">]</span>               uniqueVals <span class="token operator">=</span> set<span class="token punctuation">(</span>featList<span class="token punctuation">)</span>        bestGiniCut <span class="token operator">=</span> <span class="token number">1000000.0</span>        bestGiniCutValue <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        Gini_value <span class="token operator">=</span><span class="token number">0.0</span>                <span class="token keyword">for</span> value <span class="token keyword">in</span> uniqueVals<span class="token punctuation">:</span>                        subDataSet <span class="token operator">=</span> SubDataset<span class="token punctuation">(</span>dataSet<span class="token punctuation">,</span>i<span class="token punctuation">,</span>value<span class="token punctuation">)</span>            prob <span class="token operator">=</span> len<span class="token punctuation">(</span>subDataSet<span class="token punctuation">)</span> <span class="token operator">/</span> float<span class="token punctuation">(</span>len<span class="token punctuation">(</span>dataSet<span class="token punctuation">)</span><span class="token punctuation">)</span>            Gini_value <span class="token operator">=</span> prob <span class="token operator">*</span> calcGini<span class="token punctuation">(</span>subDataSet<span class="token punctuation">)</span>                        otherDataSet <span class="token operator">=</span> splitOtherDataSetByValue<span class="token punctuation">(</span>dataSet<span class="token punctuation">,</span>i<span class="token punctuation">,</span>value<span class="token punctuation">)</span>            prob <span class="token operator">=</span> len<span class="token punctuation">(</span>otherDataSet<span class="token punctuation">)</span> <span class="token operator">/</span> float<span class="token punctuation">(</span>len<span class="token punctuation">(</span>dataSet<span class="token punctuation">)</span><span class="token punctuation">)</span>            Gini_value <span class="token operator">=</span> Gini_value <span class="token operator">+</span> prob <span class="token operator">*</span> calcGini<span class="token punctuation">(</span>otherDataSet<span class="token punctuation">)</span>                       <span class="token keyword">if</span> Gini_value <span class="token operator">&lt;</span> bestGiniCut<span class="token punctuation">:</span>                bestGiniCut <span class="token operator">=</span> Gini_value                bestGiniCutValue <span class="token operator">=</span> value                GiniIndex <span class="token operator">=</span> bestGiniCut        <span class="token keyword">if</span> GiniIndex <span class="token operator">&lt;</span> bestGiniIndex<span class="token punctuation">:</span>            bestGiniIndex <span class="token operator">=</span> GiniIndex            bestSplictValue <span class="token operator">=</span> bestGiniCutValue            bestFeature <span class="token operator">=</span> i            <span class="token comment" spellcheck="true">#print(bestFeature,bestSplictValue)</span>        <span class="token keyword">return</span> bestFeature<span class="token keyword">def</span> <span class="token function">TreeGenerate</span><span class="token punctuation">(</span>dataset<span class="token punctuation">,</span>feature<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#通过递归调用创建决策树</span>    label_list<span class="token operator">=</span><span class="token punctuation">[</span>example<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> example <span class="token keyword">in</span> dataset<span class="token punctuation">]</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>label_list<span class="token punctuation">.</span>count<span class="token punctuation">(</span>label_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span>len<span class="token punctuation">(</span>label_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#设置递归结束条件，类别中所有的标签都相同时，递归结束，返回一个叶节点</span>        <span class="token keyword">return</span> label_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>      best_index<span class="token operator">=</span>ChooseBestFeature<span class="token punctuation">(</span>dataset<span class="token punctuation">)</span>    best_feature<span class="token operator">=</span>feature<span class="token punctuation">[</span>best_index<span class="token punctuation">]</span>    decisionTree<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;best_feature:&amp;#123;&amp;#125;&amp;#125;</span>    <span class="token keyword">del</span><span class="token punctuation">(</span>feature<span class="token punctuation">[</span>best_index<span class="token punctuation">]</span><span class="token punctuation">)</span>    values_best_feature<span class="token operator">=</span><span class="token punctuation">[</span>example<span class="token punctuation">[</span>best_index<span class="token punctuation">]</span> <span class="token keyword">for</span> example <span class="token keyword">in</span> dataset<span class="token punctuation">]</span>    dict_value<span class="token operator">=</span>set<span class="token punctuation">(</span>values_best_feature<span class="token punctuation">)</span>    <span class="token keyword">for</span> value <span class="token keyword">in</span> dict_value<span class="token punctuation">:</span>        new_feature<span class="token operator">=</span>feature<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        decisionTree<span class="token punctuation">[</span>best_feature<span class="token punctuation">]</span><span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token operator">=</span>TreeGenerate<span class="token punctuation">(</span>SubDataset<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span>best_index<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span>new_feature<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#递归调用自身不断生成子树</span>            <span class="token keyword">return</span> decisionTree<span class="token keyword">def</span> <span class="token function">GenerateDataset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     dataset <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'青年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'一般般'</span><span class="token punctuation">,</span> <span class="token string">'拒绝'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'青年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'好'</span><span class="token punctuation">,</span> <span class="token string">'拒绝'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'青年'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'好'</span><span class="token punctuation">,</span> <span class="token string">'同意'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'青年'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'一般般'</span><span class="token punctuation">,</span> <span class="token string">'同意'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'青年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'一般般'</span><span class="token punctuation">,</span> <span class="token string">'拒绝'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'中年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'一般般'</span><span class="token punctuation">,</span> <span class="token string">'拒绝'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'中年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'好'</span><span class="token punctuation">,</span> <span class="token string">'拒绝'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'中年'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'好'</span><span class="token punctuation">,</span> <span class="token string">'同意'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'中年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'非常好'</span><span class="token punctuation">,</span> <span class="token string">'同意'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'中年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'非常好'</span><span class="token punctuation">,</span> <span class="token string">'同意'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'老年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'非常好'</span><span class="token punctuation">,</span> <span class="token string">'同意'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'老年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'好'</span><span class="token punctuation">,</span> <span class="token string">'同意'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'老年'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'好'</span><span class="token punctuation">,</span> <span class="token string">'同意'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'老年'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'非常好'</span><span class="token punctuation">,</span> <span class="token string">'同意'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'老年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'一般般'</span><span class="token punctuation">,</span> <span class="token string">'拒绝'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    features <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'年龄'</span><span class="token punctuation">,</span> <span class="token string">'有工作'</span><span class="token punctuation">,</span> <span class="token string">'有房子'</span><span class="token punctuation">,</span> <span class="token string">'信贷情况'</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> dataset<span class="token punctuation">,</span> features<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    dataset<span class="token punctuation">,</span>feature<span class="token operator">=</span>GenerateDataset<span class="token punctuation">(</span><span class="token punctuation">)</span>    decision_tree<span class="token operator">=</span>TreeGenerate<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span>feature<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>decision_tree<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 定义文本框和箭头格式</span>    decisionNode <span class="token operator">=</span> dict<span class="token punctuation">(</span>boxstyle<span class="token operator">=</span><span class="token string">"round4"</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'#3366FF'</span><span class="token punctuation">)</span>  #定义判断结点形态    leafNode <span class="token operator">=</span> dict<span class="token punctuation">(</span>boxstyle<span class="token operator">=</span><span class="token string">"circle"</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'#FF6633'</span><span class="token punctuation">)</span>  #定义叶结点形态    arrow_args <span class="token operator">=</span> dict<span class="token punctuation">(</span>arrowstyle<span class="token operator">=</span><span class="token string">"&lt;-"</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'g'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#定义箭头</span>    mpl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 指定默认字体</span>    mpl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>  <span class="token comment" spellcheck="true"># 解决保存图像时负号'-'显示为方块的问题</span>    createPlot<span class="token punctuation">(</span>decision_tree<span class="token punctuation">)</span></code></pre><p>程序运行结果：<img src="D:/py_workspace/homework/DecisionTree/3.png" alt="控制台输出结果" title="控制台输出结果"><br>matplotlib绘图结果：<img src="D:/py_workspace/homework/DecisionTree/4.png" alt="绘制决策树" title="使用matplotlib绘制决策树"></p><p>#第六章<br>###第一题</p><ul><li>Model1<br>$$TP=300,FN=80 ,TN=500 ,FP=60$$<br>$$Acurracy=\frac{TP+TN}{TP+FN+TN+FP}=\frac{300+500}{300+80+500+60}=0.851$$<br>$$Cost=300\times(-1)+80\times100+500\times0+60\times5=8000$$<br>$$Recall=\frac{TP}{TP+FN}=\frac{300}{300+80}=0.789$$</li><li>Model2<br>$$TP=500,FN=90,TN=400,FP=10$$<br>$$Acurracy=\frac{TP+TN}{TP+FN+FP+TN}=\frac{500+400}{500+400+10+90}=0.9$$<br>$$Cost=500\times(-1)+90\times100+400\times0+10\times5=8550$$<br>$$Recall=\frac{TP}{TP+FN}=\frac{500}{500+90}=0.847$$</li></ul><p>###第二题</p><ul><li>1、当阈值增大时，样本中实际为正值的样本的个数不变，但是由于阈值的提高，可能导致一部分正例可能被误判为负例，即$TP+FN$的值不变，而$TP$的值可能变小，$Recall=\frac{TP}{TP+FN}$，所以，recall的值将可能不变或变小。</li><li>2、当阈值减小时，样本中实际为正值的样本的个数不变，但是由于阈值的减小，可能导致一部分本来被误判的正例被正确的判为正例，即$TP+FN$的值不变，而$TP$的值可能变大，$Recall=\frac{TP}{TP+FN}$，所以，recall的值将可能不变或变大。</li></ul><p>###第三题<br>ROC曲线即受试者工作特征曲线，其纵轴为TPR(True Positive Rate)，横轴为FPR(False Positive Rate)：<br>$$TPR=\frac{TP}{TP+FN}$$<br>$$FPR=\frac{FP}{FP+TN}$$<br>在ROC曲线中的每一个点都代表了一个分类器，而这个点的横纵坐标代表了这个分类器的性能。改变分类器的阈值，分类器所代表的点也在ROC曲线上移动。<br>ROC曲线的四个顶点$(0,0),(0,1),(1,0),(0,0)$；每个点都有特殊的含义：</p><ul><li>$(0,0)$点：即$FPR=TPR=0$，即$FP=TP=0$，可以发现该分类器预测所有的样本都为负样本;</li><li>$(0,1)$点：即$FPR=0,TPR=1$，即$TP=TP+FN，FN=FP=0$，且该分类器全部判断正确，是一种理想的分类器；</li><li>$(1,0)$点：即$FPR=1,TPR=0$，即$FP=FP+TN,TP=TN=0$，该分类器是最糟糕的分类器，所有的预测都是错误的；</li><li>$(1,1)$点：即$FPR=TPR=1$，$TN=FN=0$，可以发现，该分类器判断所有的样本都是正样本。<br>###第四题<br>$M_1$模型在大小为50的集合上进行测试，错误率$e_1=0.13$;<br>$M_2$模型在大小为4500的集合上进行测试，错误率$e_2=0.28$;<br>当测试集足够大时，可认为：<br>$$e_1 \sim N(\mu_1, \sigma_1^2)$$<br>$$e_2 \sim N(\mu_2, \sigma_2^2)$$<br>为了比较两个模型的性能是否有显著的统计学上的差异，令$d=e_1-e_2$，因为$e_1\sim N,e_2\sim N$,所以，$d\sim N(d_t,\sigma_t)$,由正态分布的性质：<br>$$\sigma_t^2=\sigma_1^2+\sigma_2^2\approx\hat{\sigma_1^2}+\hat{\sigma_2^2}=\frac{e_1(1-e_1)}{n_1}+\frac{e_2(1-e_2)}{n_2}$$<br>$$d_t=d\pm Z_{\frac{\alpha}{2}}\hat{\sigma_t}$$<br>$$d=\lvert e_2-e_1 \rvert=0.28-0.13=0.15$$<br>$$\hat{\sigma_d}=\frac{0.13(1-0.13)}{50}+\frac{0.28(1-0.28)}{4500}=0.0023$$<br>当置信水平为0.95时，$Z_\frac{\alpha}{2}=1.96$:<br>$$d_t=0.15\pm 1.96\times \sqrt{0.0023}=0.15\pm 0.094$$<br>区间中不包含0，认为两者之间有差距，模型$M_1$的性能优于模型$M_2$的性能。<br>###第五题<br>在机器学习建模过程中，通行的做法通常是将数据分为训练集和测试集。测试集是与训练独立的数据，完全不参与训练，用于最终模型的评估。在训练过程中，经常会出现过拟合的问题，就是模型可以很好的匹配训练数据，却不能很好在预测训练集外的数据。如果此时就使用测试数据来调整模型参数，就相当于在训练时已知部分测试数据的信息，会影响最终评估结果的准确性。通常的做法是在训练数据再中分出一部分做为验证(Validation)数据，用来评估模型的训练效果。</li></ul><p>验证数据取自训练数据，但不参与训练，这样可以相对客观的评估模型对于训练集之外数据的匹配程度。模型在验证数据中的评估常用的是交叉验证，又称循环验证。它将原始数据分成K组(K-Fold)，将每个子集数据分别做一次验证集，其余的K-1组子集数据作为训练集，这样会得到K个模型。这K个模型分别在验证集中评估结果，最后的误差MSE(Mean Squared Error)加和平均就得到交叉验证误差。交叉验证有效利用了有限的数据，并且评估结果能够尽可能接近模型在测试集上的表现，可以做为模型优化的指标使用。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> KFold<span class="token keyword">import</span> random<span class="token comment" spellcheck="true">#随机生成一百个(-20,20)的数字</span>num<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    num<span class="token punctuation">.</span>append<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print(num)</span><span class="token comment" spellcheck="true">#使用k-fold方法对数据集进行划分</span>num<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>num<span class="token punctuation">)</span>kf<span class="token operator">=</span>KFold<span class="token punctuation">(</span>n_splits<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token keyword">for</span> train<span class="token punctuation">,</span>test <span class="token keyword">in</span> kf<span class="token punctuation">.</span>split<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    num_train<span class="token punctuation">,</span>num_test<span class="token operator">=</span>num<span class="token punctuation">[</span>train<span class="token punctuation">]</span><span class="token punctuation">,</span>num<span class="token punctuation">[</span>test<span class="token punctuation">]</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"训练集为："</span><span class="token punctuation">,</span>num_train<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"验证集为："</span><span class="token punctuation">,</span>num_test<span class="token punctuation">)</span></code></pre><p>程序运行结果：<img src="D:/py_workspace/homework/DecisionTree/5.png" alt="控制台输出结果" title="控制台输出结果"></p>]]></content>
      
      
      <categories>
          
          <category> 日常技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tech </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu16.04下载数据集的折腾</title>
      <link href="/2021/10/26/baidudisk/"/>
      <url>/2021/10/26/baidudisk/</url>
      
        <content type="html"><![CDATA[<p>最近在用实验室的服务器炼丹，被数据集折腾的够呛。别人的模型是用的ffhq集，这个数据集是开源的，但是部署在谷歌网盘上，<del>属于是开源了但没完全开</del>。<br>为了下载数据，最开始也是最直接的想法是在linux上折腾梯子。首选clash，没找到有图形化的窗口的项目。遂转用Qv2ray，在找教程的时候突然想到，如果有人把服务器的系统搞坏了（实验室比较穷，我需要和别人共用一台服务器），我这数据岂不是白白下载？于是决定直接在自己的电脑上下载，下载之后上传到百度网盘，这样也能为数据集做个备份，免得哪天被人rm\rf了。于是又在服务器上折腾百度网盘，首先去百度网盘官网下载deb包进行安装，安装成功了，但是打开之后就报错，可能百度没有为ubuntu16.04做适配。然后就打开万能的百度一下开始找<a href="https://www.jianshu.com/p/ac4a4399d99c">在ubuntu16.04上安装百度网盘的教程</a>，但是似乎阿里云镜像挂掉了。于是，百度网盘这条路也宣告破产。</p><p>这时，想起了服务器和自己的电脑用的是一个局域网，于是，想到可以使用scp命令传文件，应该比百度网盘下载还能快一些（但是数据还是要上传网盘做备份）。<br>scp语法：</p><pre class=" language-python"><code class="language-python">scp <span class="token punctuation">(</span>选项<span class="token punctuation">)</span> <span class="token punctuation">(</span>参数<span class="token punctuation">)</span></code></pre><p>选项</p><pre><code>-1：使用ssh协议版本1；-2：使用ssh协议版本2；-4：使用ipv4；-6：使用ipv6；-B：以批处理模式运行；-C：使用压缩；-F：指定ssh配置文件；-i：identity_file 从指定文件中读取传输时使用的密钥文件（例如亚马逊云pem），此参数直接传递给ssh；-l：指定宽带限制；-o：指定使用的ssh选项；-P：指定远程主机的端口号；-p：保留文件的最后修改时间，最后访问时间和权限模式；-q：不显示复制进度；-r：以递归方式复制。</code></pre><p>在跨服务器文件传输中，用到的命令格式如下：</p><pre><code>scp /opt/1.rar(此处更改为你要上传至服务器的文件路径) 服务器名@服务器ip地址:/opt(此处更改为你要在服务器上保存此文件的路径）</code></pre><p>从服务器向本地拉取文件的命令如下：</p><pre><code>scp /opt(此处更改为你要在本地保存此文件的路径） 服务器名@服务器ip地址:/opt/1.rar(此处更改为你要拉取至本地的文件的路径)</code></pre><p>当然，要保证服务器和自己的电脑之间可以相互ping通。<br>亲测速度挺好的，问题解决~</p>]]></content>
      
      
      <categories>
          
          <category> 日常技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tech </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown基础语法练习</title>
      <link href="/2021/10/21/markdown-prictice/"/>
      <url>/2021/10/21/markdown-prictice/</url>
      
        <content type="html"><![CDATA[<p>使用vscode进行markdown文件编写，在vscode中有丰富的插件可以使用，推荐使用markdown preview插件，可同时预览.md文件的效果。</p><h1 id="标题练习"><a href="#标题练习" class="headerlink" title="标题练习"></a>标题练习</h1><h1 id="主标题"><a href="#主标题" class="headerlink" title="主标题"></a>主标题</h1><p>语法：主标题文字 空行 ====</p><h2 id="副标题"><a href="#副标题" class="headerlink" title="副标题"></a>副标题</h2><p>语法：副标题文字 空行 —-</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><p>语法： #（有几个#号就是几级标题）标题文字</p><h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><p>语法： TAGS/标签：内容</p><p>标签: 练习 markdown语法</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>语法: 在段落中填写 [TOC] （toc小写也可以）以显示各标题为结构的目录（大纲）导航。</p><p>[toc]</p><h1 id="斜体，粗体，删除线，分栏线"><a href="#斜体，粗体，删除线，分栏线" class="headerlink" title="斜体，粗体，删除线，分栏线"></a>斜体，粗体，删除线，分栏线</h1><h1 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a>粗体</h1><p>语法： 在文字两端加双下底线或双星号<br><strong>粗体文字示范</strong></p><h1 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h1><p>语法： 在文字两端加单下底线或单星号<br><em>斜体文字示范</em></p><h1 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h1><p>语法： 在文字两端加双波浪号<br><del>删除线示范</del></p><h1 id="分栏线"><a href="#分栏线" class="headerlink" title="分栏线"></a>分栏线</h1><p>语法： 在空白行下方添加三条—横线</p><hr>]]></content>
      
      
      <categories>
          
          <category> 日常技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tech </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>祝我自己生日快乐/博客开张纪念</title>
      <link href="/2021/10/21/happybirthday/"/>
      <url>/2021/10/21/happybirthday/</url>
      
        <content type="html"><![CDATA[<p><font size =5><font face='微软雅黑'>21岁了。</font></font>  </p><p><font size =5><font face='微软雅黑'>今天就是21岁的第一天。很难想象之后的日子就是朝着三十岁大步流星头也不回的猛冲。彷佛还在去年生日的第一天，还在考研的压力下苦苦的与失眠和蚊子作斗争。寒来暑往，四序迁流。彷佛真的就是在弹指一挥间。</font></font>  </p><p><font size =5><font face='微软雅黑'>从20岁到21岁，从南京到西安，从本科生到研究生，也算是生命中很重要的转折之一了吧。前段时间在网上查资料，看了很多大佬的技术博客都放在自己的个人博客里边。后来就稍微关注了一下这方面的技术。发现搭建一个个人主页的成本似乎并不是很高，需要的入门技术也不是很复杂。于是，就买了自己的域名，使用github pages+hexo的技术方案初步搭建了自己的主页，算是给自己的生日礼物吧。</font></font></p><p><font size =5><font face='微软雅黑'>这个主页内容用了很短的时间来折腾，大多数东西都直接采用了matery主题的框架，还有很多功能目前没有实现。以后会继续折腾，受制于个人审美能力的原因，应该也是在matery或者其他主题的框架下继续魔改吧。个人博客以后主要会用来记录自己的技术学习笔记，也会有一些个人生活分享。</font></font></p><p><font size =5><font face='微软雅黑'>你我皆凡人，生在人世间。终日奔波苦，一刻不得闲。没有人是世界的中心。平凡的生活，也有被记录下来的价值。记录自己的生活，包括技术生活和日常生活，给自己一个从旁观者的角度来看自己的生活的机会，这就是这个博客最大的意义，也是给自己最好的生日礼物。</font></font></p>]]></content>
      
      
      <categories>
          
          <category> 日日谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nomal days </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
