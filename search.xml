<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>很狂的人</title>
      <link href="/2022/09/08/%E5%BE%88%E7%8B%82%E7%9A%84%E4%BA%BA/"/>
      <url>/2022/09/08/%E5%BE%88%E7%8B%82%E7%9A%84%E4%BA%BA/</url>
      
        <content type="html"><![CDATA[<p>你好！素未谋面的人，很久不见你出现在我的梦中。早已忘记你在梦中叮嘱了我些什么，拖延的人就是这般下场，早上明明还能记得清楚。但若是忘了，那一定是这叮嘱不太重要，你瞧，你昨夜来我梦中的事我是记得一清二楚。</p><p>最近总是觉得自己很累，其实也不是最近，一直以来都是如此。生活对我来说就是上紧了发条的钟，一下不漏的往前走，明明秒针已经和钟表的底盘摩擦出了火花，还是要循规蹈矩的分秒不差。这发条的力量是如此之大。我们在同龄人的裹挟之下一路跌跌撞撞的走到了现在，做了很多不想做的选择，去了不想去的地方。</p><p>最近痴迷文明六以致于几乎将所有的业余时间都投入了进去，再想起写写这些闲话的时候已经过完了中秋节假期。</p><p>再次沉迷于文明六以至于又一周过去了还是这几句话……</p>]]></content>
      
      
      <categories>
          
          <category> 日日谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> normaldays </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bfs</title>
      <link href="/2022/09/06/bfs/"/>
      <url>/2022/09/06/bfs/</url>
      
        <content type="html"><![CDATA[<h3 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h3><p>BFS即广度优先搜索，是一种图论算法，用于在图中寻找两个节点之间的最短路径。它的基本思想是，从起始节点开始，沿着树的宽度遍历树的节点。如果所有节点均被访问，则算法中止。如果目标节点被发现，则算法中止。广度优先搜索是一种盲目搜索，它并不试图找到最优解，而是以较低的代价找到可行解。广度优先搜索算法的时间复杂度为O(V+E)，其中V是顶点的数量，E是边的数量。</p><h4 id="BFS的框架"><a href="#BFS的框架" class="headerlink" title="BFS的框架"></a>BFS的框架</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> step <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> root<span class="token punctuation">,</span> Node<span class="token operator">*</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    queue<span class="token operator">&lt;</span>Node<span class="token operator">*</span><span class="token operator">></span> q<span class="token punctuation">;</span>    set<span class="token operator">&lt;</span>Node<span class="token operator">*</span><span class="token operator">></span> visited<span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将起始节点加入队列</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            Node<span class="token operator">*</span> cur <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 判断是否到达终点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token operator">!=</span> visited<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 如果已经访问过，跳过</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            visited<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 将cur的相邻节点加入队列</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">*</span> next <span class="token operator">:</span> cur<span class="token operator">-></span>neighbors<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        step<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 增加步数</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若bfs的对象为二叉树，仅有父节点指向子节点的指针而没有子节点指向父节点的指针时，不需要担心会走回头路的问题，可以不需要visited数组。若有子节点指向父节点的指针，则需要visited数组来记录已经访问过的节点，避免走回头路。</p><h4 id="BFS的应用"><a href="#BFS的应用" class="headerlink" title="BFS的应用"></a>BFS的应用</h4><ul><li><a href="https://leetcode-cn.com/problems/minimum-depth-of-binary-tree/">leetcode 111. 二叉树的最小深度</a></li></ul><p><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/20220906102003.png" alt="111. 二叉树的最小深度"></p><p>题解：<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">minDepth</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">></span> q<span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> sz <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                TreeNode<span class="token operator">*</span> cur <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> cur<span class="token operator">-></span>right <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> res<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            res<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>这道题的题解完全套用上文的bfs框架，只需要设置合理的终止条件：当遍历到的节点的左右子节点都为空时，返回当前的步数。（同时由于你扣的优秀测例还需要考虑根节点为空的情况。。。）</p><ul><li><a href="https://leetcode-cn.com/problems/open-the-lock/">leetcode 752. 打开转盘锁</a></li></ul><p><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/20220906112215.png" alt="752. 打开转盘锁"></p><p>题解：<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">up</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'9'</span><span class="token punctuation">)</span> s<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> s<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    string <span class="token function">down</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">)</span> s<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'9'</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> s<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">openLock</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> deadends<span class="token punctuation">,</span> string target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        unordered_set<span class="token operator">&lt;</span>string<span class="token operator">></span> us<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> p <span class="token operator">:</span> deadends<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token string">"0000"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            us<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        queue<span class="token operator">&lt;</span>string<span class="token operator">></span> q<span class="token punctuation">;</span>        unordered_set<span class="token operator">&lt;</span>string<span class="token operator">></span> visited<span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"0000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        visited<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span><span class="token string">"0000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> sz <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                string cur <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 判断是否到达终点</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> res<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// 将相邻节点加入队列,若相邻节点是死结点或者已经遍历过的节点则不加入</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    string u <span class="token operator">=</span> <span class="token function">up</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>                    string d <span class="token operator">=</span> <span class="token function">down</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>us<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span> <span class="token operator">==</span> us<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> visited<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span> <span class="token operator">==</span> visited<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>                        visited<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                                        <span class="token keyword">if</span><span class="token punctuation">(</span>us<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">==</span> us<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> visited<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">==</span> visited<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>                        visited<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            res <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>这题的题解也是完全套用上文的bfs框架，字符串的变化相当于字符串的相邻节点，需要注意在保证相邻节点不是已经遍历过的之外还需要保证相邻节点不是死结点。（再吐槽一次你扣的优秀测例”0000”放在deadends里边）<br>使用vector find和unordered_set find效率完全不同，使用vector find时直接测例超时不能通过，unordered_set的查找效率更高，因此使用unordered_set来存储死结点和访问过的节点。</p><p>这道题还可以使用双向bfs来优化，参考<a href="https://leetcode.cn/problems/open-the-lock/solution/gong-shui-san-xie-yi-ti-shuang-jie-shuan-wyr9/">这里</a>。bfs的时间复杂度常常与图的边和节点数有关，而图的边和节点在一定情况下可能出现指数级的扩大，因此使用双向bfs可以大幅度的减少时间复杂度。这里给出一个c++的双向bfs的模板：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> step <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> root<span class="token punctuation">,</span> Node<span class="token operator">*</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    queue<span class="token operator">&lt;</span>Node<span class="token operator">*</span><span class="token operator">></span> q1<span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span>Node<span class="token operator">*</span><span class="token operator">></span> q2<span class="token punctuation">;</span>    unordered_set<span class="token operator">&lt;</span>Node<span class="token operator">*</span><span class="token operator">></span> visited<span class="token punctuation">;</span>    q1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将起始节点加入队列1</span>    q2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将终止节点加入队列2</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>q2<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 从节点数较少的队列开始遍历,尽可能的降低复杂度</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>q1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> q2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>q1<span class="token punctuation">,</span> q2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> sz <span class="token operator">=</span> q1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            Node<span class="token operator">*</span> cur <span class="token operator">=</span> q1<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 判断是否到达终点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>q2<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token operator">!=</span> q2<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> step<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> p <span class="token operator">:</span> cur<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">==</span> visited<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    q1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>                    visited<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        step <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于这道题，也可以使用双向bfs来优化：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">up</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'9'</span><span class="token punctuation">)</span> s<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> s<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    string <span class="token function">down</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">)</span> s<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'9'</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> s<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">openLock</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> deadends<span class="token punctuation">,</span> string target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        unordered_set<span class="token operator">&lt;</span>string<span class="token operator">></span> us<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> p <span class="token operator">:</span> deadends<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token string">"0000"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            us<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        unordered_set<span class="token operator">&lt;</span>string<span class="token operator">></span> q1<span class="token punctuation">;</span>        unordered_set<span class="token operator">&lt;</span>string<span class="token operator">></span> q2<span class="token punctuation">;</span>        unordered_set<span class="token operator">&lt;</span>string<span class="token operator">></span> visited<span class="token punctuation">;</span>        q1<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span><span class="token string">"0000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q2<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>        visited<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span><span class="token string">"0000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>q2<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            unordered_set<span class="token operator">&lt;</span>string<span class="token operator">></span> temp<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>q1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> q2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>q1<span class="token punctuation">,</span> q2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">int</span> sz <span class="token operator">=</span> q1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> cur <span class="token operator">:</span> q1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 判断是否是死节点</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>us<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token operator">!=</span> us<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                visited<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 判断是否到达终点</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>q2<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token operator">!=</span> q2<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> res<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// 将相邻节点加入队列,若相邻节点已经遍历过的节点则不加入</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    string u <span class="token operator">=</span> <span class="token function">up</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>                    string d <span class="token operator">=</span> <span class="token function">down</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>visited<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span> <span class="token operator">==</span> visited<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> temp<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>visited<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">==</span> visited<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> temp<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            q1 <span class="token operator">=</span> q2<span class="token punctuation">;</span>            q2 <span class="token operator">=</span> temp<span class="token punctuation">;</span>            res <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下所示，双向bfs的性能相对于单向bfs有了极大的提升。虽然本质上，传统的bfs和双向bfs的时间复杂度都是一样的，但是双向bfs往往可以增快算法运行的速度，因此在一些情况下，双向bfs是一个很好的选择。</p><p><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/20220906151506.png" alt="运行结果"></p><hr><p>2022.9.21更新、</p><p>今天的每日一题是一道bfs，但是我发现我好像已经把bfs忘了，并不会做。。。再复习一下。</p><ul><li><a href="https://leetcode.cn/problems/k-similar-strings/">leetcode 854. 相似度为k的字符串</a></li></ul><p><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/20220921152553.png" alt="20220921152553"></p><p>题解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">find_neighbor</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span>string<span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">kSimilarity</span><span class="token punctuation">(</span>string s1<span class="token punctuation">,</span> string s2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// bfs</span>        queue<span class="token operator">&lt;</span>string<span class="token operator">></span> q<span class="token punctuation">;</span>        set<span class="token operator">&lt;</span>string<span class="token operator">></span> visited<span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> step <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> sz <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">auto</span> cur <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 是否到达终点</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">==</span> s2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> step<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// 是否曾经访问过</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>visited<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token operator">!=</span> visited<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                visited<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 将所有邻居入队</span>                <span class="token keyword">auto</span> neighbors <span class="token operator">=</span> <span class="token function">find_neighbor</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> p <span class="token operator">:</span> neighbors<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            step<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这道题直接使用上边的bfs框架显然是十分正确的。但是，时间复杂度太高了，单单是找邻居这一步就是$O(n^2)$的复杂度，别说个步骤在bfs中被反复的使用了。果不其然，提交了就是超时。</p><p>这样子超时之后最直观的想法就是优化一下找邻居这一步，所以，借鉴别人的思路，将find_neighbor这一步优化。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">find_neighbor</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> string s2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> res<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> s2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> s2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就可以通过了。这里将找邻居的过程变成了一个贪心的过程，每次都找一个最起码向target靠近一位的邻居，这样就可以减少很多邻居的数量。但是不是很明白为什么这样可以找得到最优的结果。</p><p>优化后总体的代码如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">find_neighbor</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> string s2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>string<span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> s2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> s2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">kSimilarity</span><span class="token punctuation">(</span>string s1<span class="token punctuation">,</span> string s2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// bfs 超时</span>        queue<span class="token operator">&lt;</span>string<span class="token operator">></span> q<span class="token punctuation">;</span>        set<span class="token operator">&lt;</span>string<span class="token operator">></span> visited<span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> step <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> sz <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">auto</span> cur <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 是否到达终点</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">==</span> s2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> step<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// 是否曾经访问过</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>visited<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token operator">!=</span> visited<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                visited<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 将所有邻居入队</span>                <span class="token keyword">auto</span> neighbors <span class="token operator">=</span> <span class="token function">find_neighbor</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> p <span class="token operator">:</span> neighbors<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            step<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来尝试一些比较常规的想的明白的优化吧。比如上文说过的双向bfs。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">find_neighbor</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span>string<span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">kSimilarity</span><span class="token punctuation">(</span>string s1<span class="token punctuation">,</span> string s2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 双向bfs</span>        <span class="token keyword">int</span> step <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        set<span class="token operator">&lt;</span>string<span class="token operator">></span> q1<span class="token punctuation">;</span>        set<span class="token operator">&lt;</span>string<span class="token operator">></span> q2<span class="token punctuation">;</span>        set<span class="token operator">&lt;</span>string<span class="token operator">></span> visited<span class="token punctuation">;</span>        q1<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        q2<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>        visited<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>q2<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            set<span class="token operator">&lt;</span>string<span class="token operator">></span> temp<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>q1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> q2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>q1<span class="token punctuation">,</span> q2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// int sz = q1.size();</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> cur <span class="token operator">:</span> q1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 是否到达终点</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>q2<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token operator">!=</span> q2<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> step<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                visited<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 邻居节点入队</span>                <span class="token keyword">auto</span> neighbors <span class="token operator">=</span> <span class="token function">find_neighbor</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> p <span class="token operator">:</span> neighbors<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>visited<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">!=</span> visited<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    temp<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            q1 <span class="token operator">=</span> q2<span class="token punctuation">;</span>            q2 <span class="token operator">=</span> temp<span class="token punctuation">;</span>            step<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>好吧还是超时。。。看来双向bfs的优化作用实在是很有限呀。</p>]]></content>
      
      
      <categories>
          
          <category> 刷题赎罪 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>梦</title>
      <link href="/2022/08/22/%E6%A2%A6/"/>
      <url>/2022/08/22/%E6%A2%A6/</url>
      
        <content type="html"><![CDATA[<h4 id="婚后"><a href="#婚后" class="headerlink" title="婚后"></a>婚后</h4><p>秋风瑟瑟，梧桐树的叶子飘转着从树上落下。枝桠繁盛交错着，像运动员们虬结的肌肉，一缕缕阳光从树杈的缝隙中穿过，衬着高远的天空。<br>在一个像是勤政路和银杏路口，也可能是少林路和少室路口的十字路口，陆陆续续碰到了几个和老婆一块匆匆走过的男人。<br>看不到他们的脸，但是能很清楚的听到他们在说什么。</p><p>你天天除了干家务还能干什么。<br>我刚把公积金取了给娃报了个辅导班。<br>新开业的超市大米一块钱一斤。</p><p>那些男人的面孔抽动着，扭曲着，最后都变成了我的脸。<br>我开始害怕的往前跑。</p><hr><h4 id="期中考试"><a href="#期中考试" class="headerlink" title="期中考试"></a>期中考试</h4><p>我一路的往前跑啊跑啊跑，身边的景色扭曲着，变换着。<br>场景逐渐的稳定了下来<br>冥冥中，我知道这是要期中考试了。<br>跌跌撞撞的，似乎摔倒在了一个女生怀里。<br>她说，怎么这么不小心。<br>我抬头看她一眼，似乎是高中的后桌lzh，又好像是那个笑得很好看的sjq，一愣神又变成了czr。<br>再回身，站在我面前的已经是几个熟悉的大学同学了。<br>7导问，最近怎么样，我毫不犹豫的回呛，总好过要考期中考试的人。<br>鸽子精皱了皱眉，你跑得过他们吗，我想了想，仔细对比了一下敌我实力，我似乎不用跑吧。<br>当他们带着不友善站在我面前时，我真的没有跑。</p><hr><p>闹钟响了，这光怪陆离的梦。</p>]]></content>
      
      
      <categories>
          
          <category> 日日谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> normaldays </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前缀和与差分数组</title>
      <link href="/2022/08/17/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84/"/>
      <url>/2022/08/17/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<p>今天在看东哥的算法笔记时学习了两个以空间换时间的算法技巧，前缀和和差分数组。但是在刷题的时候不以为然，多层for循环走天下，直到测例超时才幡然醒悟，悔之晚矣呀！<br>但是还是不得不吐槽一下，leetcode的某些测试用例……</p><p><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/9c4c145a8cb580454498db4bb05b1f6.png" alt="想得出这种测例的人生活一定很不幸吧"></p><h5 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h5><p>前缀和适用于需要快速，频繁的计算一个索引区间内的元素之和的场景。<br>对于一个长度为n的一维数组nums，维持一个长度为n+1的前缀和数组presum，其中，</p><script type="math/tex; mode=display">presum[i] = \sum_{a=0}^{i-1} nums[a]</script><p>这样，我们在计算nums数组的一个索引区间内的元素之和时，只需要使用presum中的相应元素进行一次加减法运算即可。</p><script type="math/tex; mode=display">\begin{align*}sum(nums[i], nums[j]) &= presum[j+1] - presum[i] = \sum_{a=0}^{j} nums[a] - \sum_{a=0}^{i-1} nums[a] \\&=\sum_{a=i}^{j} nums[a]\end{align*}</script><p>这种做法在仅需进行少量计算时，不如直接用for循环进行遍历求和，但当需要进行多次快速检索时，前缀和数组的优越性就体现出来了。</p><h6 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h6><p><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/20220817155959.png" alt="[leetcode 303题](https://leetcode.cn/problems/range-sum-query-immutable/)"></p><ul><li>题解：</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">NumArray</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> preSum<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">NumArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        preSum <span class="token operator">=</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            preSum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> preSum<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> <span class="token function">sumRange</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> preSum<span class="token punctuation">[</span>right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> preSum<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/** * Your NumArray object will be instantiated and called as such: * NumArray* obj = new NumArray(nums); * int param_1 = obj->sumRange(left,right); */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样的，前缀和的方法也适用于二维数组。</p><h5 id="差分数组"><a href="#差分数组" class="headerlink" title="差分数组"></a>差分数组</h5><p>类似与前缀和技巧，差分数组的思想是额外的维持一个长度为n的差分数组differ。</p><script type="math/tex; mode=display">differ[i] = nums[i] - nums[i-1]</script><p>差分数组中的元素表示了原数组中相应位置上的元素与其前一个元素之间的差。差分数组的适用于我们需要频繁的对nums进行批量操作时。比如，场景要求我们对区间nums[2…6]全部加1，做一次这样的操作，只需要for循环遍历即可，但是，若是操作的太多，效率将极为低下。而若是使用差分数组，每次对区间i，j进行操作，只需要在差分数组的对应位置进行两次加减法操作即可，前者的时间复杂度为$O(n)$，而后者的时间复杂度仅为$O(1)$。</p><h6 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h6><p><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/20220817161307.png" alt="[leetcode 1109题](https://leetcode.cn/problems/corporate-flight-bookings/)"></p><ul><li>题解：</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">corpFlightBookings</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> bookings<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 超时</span>        <span class="token comment">// vector&lt;int> ans(n, 0);</span>        <span class="token comment">// for(auto p : bookings)&#123;</span>        <span class="token comment">//     for(int i = p[0]; i &lt;= p[1]; i++)&#123;</span>        <span class="token comment">//         ans[i-1] += p[2];</span>        <span class="token comment">//     &#125;</span>        <span class="token comment">// &#125;</span>        <span class="token comment">// return ans;</span>                <span class="token comment">// 构建差分数组</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">differ</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> p <span class="token operator">:</span> bookings<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            differ<span class="token punctuation">[</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> p<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;</span> differ<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                differ<span class="token punctuation">[</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-=</span> p<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 从差分数组恢复出原数组</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">ans</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> differ<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> differ<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ans<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> differ<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 刷题赎罪 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gated_PixelCNN小结</title>
      <link href="/2022/08/15/Gated-PixelCNN%E5%B0%8F%E7%BB%93/"/>
      <url>/2022/08/15/Gated-PixelCNN%E5%B0%8F%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h4 id="Gated-PixelCNN"><a href="#Gated-PixelCNN" class="headerlink" title="Gated PixelCNN"></a>Gated PixelCNN</h4><p>论文中提出的模型结合了PixelRNN和PixelCNN的优点。<br>主体结构还是PixelCNN，因为PixelCNN使用卷积运算，可以节省运算时间和运算资源。<br>相比于PixelCNN，PixelRNN的优点是使用了门控单元，且没有感受野盲区。分别针对这两点对PixelCNN进行了针对性的改进。</p><h5 id="Gated-activation"><a href="#Gated-activation" class="headerlink" title="Gated activation"></a>Gated activation</h5><p>首先，使用门激活函数代替PixelCNN中的线性激活函数。有助于建模更加复杂的interactions。门激活函数的数学表达式如下所示：</p><script type="math/tex; mode=display">y = \tanh (W_{k, f} * \mathrm {x} ) \odot \sigma(W_{k, g}* \mathrm {x})</script><p>式中的参数分别表示：<br>$\sigma$:sigmoid函数<br>$k$:卷积的层数<br>$\odot$:逐元素点乘<br>$*$:卷积操作<br>$W<em>{k, f},W</em>{k, g}$:第k层的卷积核</p><h5 id="解决Blind-spot"><a href="#解决Blind-spot" class="headerlink" title="解决Blind spot"></a>解决Blind spot</h5><p><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/20220815105923.png" alt="上图为original pixelcnn的感受野，随着卷积核的叠加，感受野盲区的范围也不断地扩大，下图为本文的解决方案，将masked conv filter分为vertical stack和horizontal stack，完美的解决了感受野盲区的问题"></p><p>Gated PixelCNN的输入被分为了两个部分，一部分是vertical，一部分是horizontal。vertical包含了现在行之上的所有行，而horizontal包含了现在行之前的所有的像素点。<br>github上已经有了完整的<a href="https://github.com/kkleidal/GatedPixelCNNPyTorch/blob/master/note-on-conv-masking.ipynb">验证代码</a>。<br>在每一层结束之后，都将这两个stack的输出结合起来。<br>两者的结合方式如图所示，使用简单的卷积。</p><p><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/20220815151441.png" alt="一个简单的Gated PixelCNN单元"></p><p><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/20220815152247.png" alt="堆叠起来的Gated PixelCNN模型，绿色为vertival部分，蓝色为horizontal部分"></p><h5 id="Conditional-PixelCNN"><a href="#Conditional-PixelCNN" class="headerlink" title="Conditional PixelCNN"></a>Conditional PixelCNN</h5><p>Gated PixelCNN在给定一些先验条件的情况下也可以成为一个条件图片生成器。<br>原始版的PixelCNN建模的对象为：</p><script type="math/tex; mode=display">P(X) = \prod_{i=1}^{n^2} p(x_i|x_1, x_2, ... ,x_{i-1})</script><p>在加入先验条件$h$之后，建模的对象变成了:</p><script type="math/tex; mode=display">P(X) = \prod_{i=1}^{n^2} p(x_i|x_1, x_2, ... ,x_{i-1},h)</script><p>此时，Gated激活函数的表达式也需要变化：</p><script type="math/tex; mode=display">y = \tanh (W_{k, f} * \mathrm {x} + V_{k,f} * \mathrm s) \odot \sigma(W_{k, g}* \mathrm {x} + V_{k,g} * \mathrm s)</script><p>式中：<br>$\mathrm{s}$: h在频域上的表示，$\mathrm{s} = m(\mathrm{h})$<br>$V_{k,f}$: $1\times 1$的卷积</p><h4 id="PixelSnail"><a href="#PixelSnail" class="headerlink" title="PixelSnail"></a>PixelSnail</h4><p>为了保证网络的设计可以满足能够轻松的推断出序列的前部分的要求，可能有以下几种做法。</p><ul><li>传统的RNN，LSTM和GRU</li><li>因果卷积</li><li>自注意力机制</li></ul><p>因果卷积可以在有限的上下文中提供高带宽的访问方式，attention机制可以在很大的上下文中应用causal attention，使网络学习到挑出聚集到的哪些信息，以及如何更好地表现这些信息。snail(simple neural attentive meta-learner)便是由两个卷积和attention交错而成。</p><p>为了在二维的图片上保证卷积的因果性，只能使用masked convolution(最原始的pixelcnn的做法)或者shift-based convlution(上文中介绍的gated-pixelcnn中将masked conv kernel分块的做法)。</p><p>但是，卷积操作只能提取到局部的信息，为了保证能够使用到全局的信息，必须进行卷积层的堆叠。在这个过程中，通常使用到的操作时dilated convolution和strided convolution，通过膨胀系数的选取实现感受野的指数级扩增。</p><p>尽管使用了dilated convolution和strided convolution，但是边缘处的像素信息依然是受限的—由于每次卷积仅能提取到有限的上下文中的信息，这些信息往往要通过一系列的中继。</p><p>大多数pixelCNN中都使用了raster scan的方式，即从左到右，再从上到下扫描。这样扫描大多数的上下文都被浪费在了距离要推断的点比较远的部分，比如说右上角的点。因此本文使用了zigzag ordering。</p><p><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/20220818173438.png" alt="两种不同的扫描顺序"></p><p>但是，使用这种扫描的顺序会导致blind spot的出现，为了解决这个问题，提出了pixelSNAIL—使用了更大更灵活的感受野。</p><p>pixelSNAIL的主要做法是引入attention模块。</p>]]></content>
      
      
      <categories>
          
          <category> 论文总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tech </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无题的信</title>
      <link href="/2022/08/06/%E6%97%A0%E9%A2%98%E7%9A%84%E4%BF%A1/"/>
      <url>/2022/08/06/%E6%97%A0%E9%A2%98%E7%9A%84%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<p>高中的时候就很喜欢写信。但是又从来没写过信，只是喜欢一些很随意的小纸条上的碎碎念，小纸条用料实在是过于的随意，也许是某次周考用剩下的演草纸——语文考试和英语考试的时长实在是过于冗长让人觉得无聊，除了用来满足不太够的睡眠还可以写一些故弄玄虚的文字，有时是从不知哪里混来的小小明信片——这便足够重视了，有了一点信的模样。那些赤裸裸的表达自己爱意的文字毫不加掩饰，绝对算不得朦朦胧胧的<a href="https://music.163.com/#/song?id=1954879007">青春期的诗</a>，只是一些中了恋爱脑病毒的青春猪头少年对言情小说的拙劣模仿。</p><p>上了大学之后也曾经写过信，但终究是被智能手机打败了。在智能手机面前我彻底一败涂地，不仅仅是很难再饱含感情的在纸上写下抒情的文字，连从小培养的看书的习惯也被电子书给取代了。抒情的文字从那些纸上和明信片上转移到了QQ和微信。这些能够及时发出的文字更多的考验及时应变的能力；那些往往不怎么经过思考便发出的文字，经常没有构思，也不能留下时间去思索收信人收到信之后的反应。事情变得无趣起来。</p><p>但是，时代的潮流就是在如此变化。于是，当年对言情小说的一些拙劣模仿变成了对互联网情感大师的拙劣模仿。在资讯浪潮的冲刷之下，集百家之所长的一些技巧被广泛的应用——如何引起一个女孩儿的兴趣，如何跟一个女孩儿聊天，如何使用一些微信和QQ聊天的little tricks，如何准确的把握与女生相处的阶段。这些技巧确实是卓有成效的，似乎，把追女生的过程简化成了一个简单的galgame，玩家只需要准确的判断哪种选择可以得到好感度+10，以及什么时候已经有了一个合适的好感度的基础，可以A上去了。事情更加无趣了。</p><p>年龄更加的增长，心中的焦虑跟着增长。总是羡慕身边同学朋友们的爱情，也常常因为总是有缘无份而心中懊恼。此时便再也不想什么写信，什么明信片之类的事了。遇到了一段自以为是的缘分就总想试试。谈恋爱这事儿到了这时变成了一件急待完成的主线任务。事情已经完全变质了。</p><p>这时候，想再写封信，却不知如何落笔了。</p><p>那个在数学课上笑着说我不知道的女孩儿已经失联多年，十六岁喜欢过的姑娘也早已是陌路人，二十一岁的初恋更是一团乱麻。</p><p>现在应该怎么反思？或许我也没做错什么。只是不知道再给谁写一封信，应该以何为题，信中写些什么。</p><hr><p>许下的承诺，或许在多年以后<br>我还在漂泊，你是错过的烟火<br>等风沙过后，才知道失去什么</p>]]></content>
      
      
      <categories>
          
          <category> 日日谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> normaldays </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法</title>
      <link href="/2022/08/04/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>/2022/08/04/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>平均时间复杂度为$O(n^2)$，在最好情况下的时间复杂度为$O(n)$，在最坏情况下的时间复杂度为$O(n^2)$，在原地修改，所以空间复杂度为$O(1)$。<br>代码实现如下所示：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">pop_sort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">&amp;</span> nums<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                T buffer <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> buffer<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><p>选择排序整体思路与冒泡排序的思路相似，都是在依次排序之后将最小的元素放在最前面，不同的是，冒泡排序是两个相邻元素之间的比较，而选择排序进行的是整体的选择，即在每一趟都查出无序区的最小元素，将最小的元素追加至有序区的末尾。<br>选择排序的平均时间复杂度为$O(n^2)$，在最好情况下的时间复杂度为$O(n^2)$，在最坏情况下的时间复杂度为$O(n^2)$，在原地修改，所以空间复杂度为$O(1)$。<br>代码实现如下：<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">select_sort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">&amp;</span> nums<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> min<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        min <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                min <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        T buffer <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">=</span> buffer<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><p>插入排序的思路是构建一个有序数列，对于未排序的数据，在已排序的序列中从前往后扫描，找到正确的位置并插入。<br>平均时间复杂度为$O(n^2)$，在最好情况下的时间复杂度为$O(n)$，在最坏情况下的时间复杂度为$O(n^2)$，在原地修改，所以空间复杂度为$O(1)$。<br>代码实现如下：<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">insert_sort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">&amp;</span> nums<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> key <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> key<span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h4 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h4><p>希尔排序是对插入排序的一种修改。希尔排序的基本思想是将待排序的数据分为若干个子序列进行插入排序，等到整个序列都基本有序时，在对整个序列直接进行插入排序。<br>希尔排序的时间复杂度与子序列的选取有关，当子序列的步长设为1时，希尔排序退化为插入排序，时间复杂度为$O(n^2)$。希尔排序的平均时间复杂度为$O(n \log n)$<br>代码实现如下：<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">shell_sort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">&amp;</span> nums<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 步长，将原序列分为l个子序列</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>h<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span>l<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        h <span class="token operator">=</span> l <span class="token operator">*</span> h <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>h<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j<span class="token operator">>=</span>h <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token operator">-</span>h<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">-=</span> h<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                T buffer <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token operator">-</span>h<span class="token punctuation">]</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>j<span class="token operator">-</span>h<span class="token punctuation">]</span> <span class="token operator">=</span> buffer<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        h <span class="token operator">=</span> h <span class="token operator">/</span> l<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><p>归并排序是一种建立在归并操作上的有效的排序算法。是一种使用分治法思想的典型应用。基本步骤为，将$n$个元素分成含$\frac{n}{2}$个元素的子序列，用合并排序法对两个子序列递归的排序，合并两个已排序的子序列得到排序的结果<br>归并排序的实现由两种方法：自上而下的递归；自下而上的迭代。<br>归并排序的时间复杂度为$O(n \log n)$，由于使用了额外的内存空间，空间复杂度为$O(n)$。<br>代码实现如下：<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//1、使用自上而下的递归的实现</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>vector<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">merge</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>T<span class="token operator">></span> left<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>T<span class="token operator">></span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span>T<span class="token operator">></span> res<span class="token punctuation">;</span>    size_t l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>left<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> r<span class="token operator">&lt;</span>right<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> right<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>left<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>right<span class="token punctuation">[</span>r<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> left<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> right<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> r<span class="token punctuation">,</span> right<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> right<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> left<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> l<span class="token punctuation">,</span> left<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>vector<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">merge_sort_recursion</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>T<span class="token operator">></span> nums<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token keyword">const</span> size_t mid <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">left</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">right</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> mid<span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">merge_sort_recursion</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">></span></span></span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">merge_sort_recursion</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">></span></span></span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token comment">//2、使用自下而上的迭代的实现</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">merge_sort_interation</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">&amp;</span> nums<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 枚举步长</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> seg <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> seg<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> seg <span class="token operator">+=</span> seg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 合并两个相邻的区间</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> seg <span class="token operator">+</span> seg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            vector<span class="token operator">&lt;</span>T<span class="token operator">></span> temp<span class="token punctuation">;</span>            <span class="token keyword">int</span> low <span class="token operator">=</span> i<span class="token punctuation">,</span> mid <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>i <span class="token operator">+</span> seg<span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> high <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>i <span class="token operator">+</span> seg <span class="token operator">+</span> seg<span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> start1 <span class="token operator">=</span> low<span class="token punctuation">,</span> end1 <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token keyword">int</span> start2 <span class="token operator">=</span> mid<span class="token punctuation">,</span> end2 <span class="token operator">=</span> high<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>start1 <span class="token operator">&lt;</span> end1 <span class="token operator">&amp;&amp;</span> start2 <span class="token operator">&lt;</span> end2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                temp<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>start1<span class="token punctuation">]</span><span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>start2<span class="token punctuation">]</span><span class="token operator">?</span> nums<span class="token punctuation">[</span>start1<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">:</span> nums<span class="token punctuation">[</span>start2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>             <span class="token keyword">while</span><span class="token punctuation">(</span>start1 <span class="token operator">&lt;</span> end1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                temp<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>start1<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>start2 <span class="token operator">&lt;</span> end2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                temp<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>start2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                nums<span class="token punctuation">[</span>low <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p>快速排序也是分治思想在排序中的一种应用，快速排序是在冒泡排序的基础上的递归分治法。快速排序是处理大数据的最快的排序算法。<br>快排的基本算法步骤为：从数列中挑出一个元素，成为基准；重新排序数列，将所有元素中比基准值小的放在基准的前面，将所有元素中比基准值大的放在基准的后边；递归的将小于基准值元素的子数列和大于基准值元素的子数列进行排序。<br>快速排序的时间复杂度为$O(n \log n)$，空间复杂度为$O(\log n)$。<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 1、迭代实现</span><span class="token keyword">struct</span> <span class="token class-name">Range</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> start<span class="token punctuation">,</span> end<span class="token punctuation">;</span>    <span class="token function">Range</span><span class="token punctuation">(</span><span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> e <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        start <span class="token operator">=</span> s<span class="token punctuation">,</span> end <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">&amp;</span> nums<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>Range<span class="token operator">></span> <span class="token function">r</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    r<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        Range <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>range<span class="token punctuation">.</span>start <span class="token operator">>=</span> range<span class="token punctuation">.</span>end<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        T mid <span class="token operator">=</span> nums<span class="token punctuation">[</span>range<span class="token punctuation">.</span>end<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> range<span class="token punctuation">.</span>start<span class="token punctuation">,</span> right <span class="token operator">=</span> range<span class="token punctuation">.</span>end<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> mid <span class="token operator">&amp;&amp;</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> left<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">>=</span> mid <span class="token operator">&amp;&amp;</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> right<span class="token operator">--</span><span class="token punctuation">;</span>            T temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">>=</span> nums<span class="token punctuation">[</span>range<span class="token punctuation">.</span>end<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            T temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>range<span class="token punctuation">.</span>end<span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>range<span class="token punctuation">.</span>end<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> left<span class="token operator">++</span><span class="token punctuation">;</span>        r<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Range</span><span class="token punctuation">(</span>range<span class="token punctuation">.</span>start<span class="token punctuation">,</span> left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Range</span><span class="token punctuation">(</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> range<span class="token punctuation">.</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 2、 递归实现</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> begin<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>begin <span class="token operator">></span> end<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    T temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>begin<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> begin<span class="token punctuation">,</span> j <span class="token operator">=</span> end<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">!=</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> temp <span class="token operator">&amp;&amp;</span> j <span class="token operator">></span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> temp <span class="token operator">&amp;&amp;</span> j <span class="token operator">></span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">></span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            T t <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    nums<span class="token punctuation">[</span>begin<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token function">quick_sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> begin<span class="token punctuation">,</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">quick_sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h4 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h4><p>堆排序是指，利用堆数据结构的排序算法。堆积是一个近似完全二叉树的结构，同时满足堆积的性质，即子节点的键值或索引总是小于或大于它的父节点，分为两种方法：</p><ul><li>大顶堆(最大堆)：每个节点的值都大于或等于其子节点的值，在堆排序算法中用于升序排列；</li><li>小顶堆(最小堆)：每个节点的值都小于或等于其子节点的值，在堆排序算法中用于降序排列。</li></ul><p>堆排序的平均时间复杂度为$O(n \log n)$，空间复杂度为$O(1)$。</p><p>代码实现如下：<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">max_heapify</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>nums<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> dad <span class="token operator">=</span> start<span class="token punctuation">;</span>    <span class="token keyword">int</span> son <span class="token operator">=</span> dad <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>son <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>son <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> end <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>son<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>son <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            son<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>dad<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>son<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>dad<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>son<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dad <span class="token operator">=</span> son<span class="token punctuation">;</span>            son <span class="token operator">=</span> dad <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">heap_sort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>nums<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">max_heapify</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">max_heapify</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>]]></content>
      
      
      <categories>
          
          <category> 刷题赎罪 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划</title>
      <link href="/2022/07/18/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>/2022/07/18/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h3 id="动态规划的基础类题目"><a href="#动态规划的基础类题目" class="headerlink" title="动态规划的基础类题目"></a>动态规划的基础类题目</h3><ul><li>斐波那契数列</li><li>背包问题</li><li>爬楼梯</li><li>……</li><li>股票问题</li><li>子序列问题</li></ul><h4 id="使用动态规划解题时需要注意的点："><a href="#使用动态规划解题时需要注意的点：" class="headerlink" title="使用动态规划解题时需要注意的点："></a>使用动态规划解题时需要注意的点：</h4><p>1.DP数组的定义和下标的含义<br>2.递推公式<br>3.DP数组的初始化<br>4.遍历顺序<br>5.打印DP数组</p><h4 id="T70-爬楼梯（斐波那契数列）"><a href="#T70-爬楼梯（斐波那契数列）" class="headerlink" title="T70.爬楼梯（斐波那契数列）"></a>T70.爬楼梯（斐波那契数列）</h4><p><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/20220507102150.png" alt="20220507102150"></p><h5 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h5><p>第n级台阶有几种走法，只与第n-1级和第n-2级有关<br>1.dp数组：dp[i]表示到达i级台阶有dp[i]种方法，<br>2.递推公式：dp[i] = dp[i-1] + dp[i-2]，<br>3.dp数组的初始化：dp[0] = 1, dp[1] = 1，<br>4.遍历顺序：从第n级台阶开始。<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//直接使用dp数组</span><span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//节省部分空间开销的写法</span><span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> dp1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> dp2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> dp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>T    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dp <span class="token operator">=</span> dp1 <span class="token operator">+</span> dp2<span class="token punctuation">;</span>        buffer <span class="token operator">=</span> dp2<span class="token punctuation">;</span>        dp2 <span class="token operator">=</span> dp1<span class="token punctuation">;</span>        dp1 <span class="token operator">=</span> dp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h4 id="T198-打家劫舍"><a href="#T198-打家劫舍" class="headerlink" title="T198.打家劫舍"></a>T198.打家劫舍</h4><p><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/20220509142502.png" alt="20220509142502"></p><h5 id="题解：-1"><a href="#题解：-1" class="headerlink" title="题解："></a>题解：</h5><ol><li>dp数组：dp[i]表示到达i房间时，最大盗取金额，</li><li>状态方程：dp[i] = max(dp[i-2] + nums[i], dp[i-1])，意思是，在到达i房间时偷不偷取决于是在这偷了赚的多还是在上一间偷了赚的多，在这一间偷了，赚的钱表示为dp[i-2] + nums[i]，在这一间没偷，赚的钱表示为dp[i-1]，</li><li>dp数组的初始化：dp[0] = 0, dp[1] = nums[0]，</li><li>遍历顺序：从第1房间开始。<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">rob</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//当然也可以为了节省内存开销，只储存上一家偷的钱和上上家偷的钱。</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="T213-打家劫舍II"><a href="#T213-打家劫舍II" class="headerlink" title="T213.打家劫舍II"></a>T213.打家劫舍II</h4><p><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/20220509183819.png" alt="20220509183819"></p><h5 id="题解：-2"><a href="#题解：-2" class="headerlink" title="题解："></a>题解：</h5><ol><li>dp数组：dp[i]表示到达i房间时，最大盗取金额，</li><li>状态方程：dp[i] = max(dp[i-2] + nums[i], dp[i-1])，意思是，在到达i房间时偷不偷取决于是在这偷了赚的多还是在上一间偷了赚的多，在这一间偷了，赚的钱表示为dp[i-2] + nums[i]，在这一间没偷，赚的钱表示为dp[i-1]，</li><li>dp数组的初始化：这是本题与上题区别较大的地方，在上题中，我们默认在第一间房间偷不偷只取决于在第二间房偷不偷，在这题中，在第一间房偷不偷取决于在最后一间房偷不偷和在上一间房偷不偷，从dp[2]到dp[n-1]的计算方式并不发生变化，存在两种情况，第一间房子不偷，此时最大金额为从第二间偷到第n间的最大金额，最后一间房子偷，此时最大金额为从第一间偷到第n-1间的最大金额， </li><li>遍历顺序：从第1房间开始。<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">rob</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> _0<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">auto</span> max <span class="token operator">=</span> <span class="token function">max_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span>max<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//从1偷到n-1</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> dp1 <span class="token operator">=</span> dp<span class="token punctuation">[</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    dp1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    dp1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//从2偷到n</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dp1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp1<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp1<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp1<span class="token punctuation">[</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="T309-买卖股票的最佳时机含冷冻期"><a href="#T309-买卖股票的最佳时机含冷冻期" class="headerlink" title="T309.买卖股票的最佳时机含冷冻期"></a>T309.买卖股票的最佳时机含冷冻期</h4><p><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/20220514151824.png" alt="20220514151824"></p><p>题解：<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> prices<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> f0 <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> f1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> f2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> newf0 <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f0<span class="token punctuation">,</span> f2<span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> newf1 <span class="token operator">=</span> f0 <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> newf2 <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f2<span class="token punctuation">,</span> f1<span class="token punctuation">)</span><span class="token punctuation">;</span>            f0 <span class="token operator">=</span> newf0<span class="token punctuation">;</span>            f1 <span class="token operator">=</span> newf1<span class="token punctuation">;</span>            f2 <span class="token operator">=</span> newf2<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>f1<span class="token punctuation">,</span> f2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>]]></content>
      
      
      <categories>
          
          <category> 刷题赎罪 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写在回家的前一夜</title>
      <link href="/2022/07/18/%E5%86%99%E5%9C%A8%E6%94%BE%E5%81%87%E5%89%8D%E7%9A%84%E4%B8%80%E5%A4%9C/"/>
      <url>/2022/07/18/%E5%86%99%E5%9C%A8%E6%94%BE%E5%81%87%E5%89%8D%E7%9A%84%E4%B8%80%E5%A4%9C/</url>
      
        <content type="html"><![CDATA[<p>到了回家前的最后一晚。按照惯例打扫了宿舍，收拾了行李，把充电宝充上电。</p><p>西安近来的天气很不怎么样。闷热天气像极了南京的夏天。兴华永远不新鲜的西瓜也像极了教超。每天苦闷的永远就是那么几事，导师，论文，工作。有时候觉得自己像祥林嫂一样啰嗦——可能是比祥林嫂还不堪，祥林嫂每天哭诉阿毛之死，我的这些小小的苦闷又哪里丝毫抵得上祥林嫂丈夫死于风寒儿子殒命狼口的悲凉。</p><p>有时希望有一处能倾诉所有苦恼和痛苦的地方。可这终究是煎水成冰，痴人说梦。人与人之间连设身处地尚且需要努力才能做到，遑论感同身受。</p><p>下午跟老师请假时是很有几分紧张的，暑假前总会想想自己这半年究竟做了什么。自我审视的结果似乎是什么都没做，但是每天又忙忙碌碌的。碌碌无为：我们的祖先为我们留下了丰富的词库用来形容人的各种窘境。得到老师的回复可以回家，但是下周就要回来，回家之后还要继续推进论文。又是满心的槽想吐。更加确定了自己就是一个情绪垃圾桶。</p><p>好久没有睡过不做梦的觉了——在成功入睡都成困难的时候还奢求睡眠质量实在是贪心。明天回家就能吃到烩面刀削面，能见到几个想见的朋友了，这点宽慰似乎是今晚可以安心入眠的保障。</p><p>干什么，干什么啊朋友，明天就回家了今天高兴点！还好还有上周没喝完的库存科罗娜。酒精的催发似乎也是入眠的保障之一。</p><p><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/33edcf1c930946e19adf93f4f8f3466.jpg" alt="只顾着喝了没拍照，图是前几天喝的福佳"></p><p>天气预报说西安今晚会下雨耶，乌云密布囤积了小半个月的水汽可以倾盆而下了。那么我的小小烦恼，又该找谁去倾倒？</p><hr><p>少年不识愁滋味，爱上层楼，爱上层楼，为赋新词强说愁；<br>而今识尽愁滋味，欲说还休，欲说还休，却道天凉好个秋。</p>]]></content>
      
      
      <categories>
          
          <category> 日日谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> normaldays </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回溯算法</title>
      <link href="/2022/07/16/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
      <url>/2022/07/16/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h4 id="回溯算法"><a href="#回溯算法" class="headerlink" title="回溯算法"></a>回溯算法</h4><p>是一种类似于深搜的穷举类型的算法，回溯算法在遍历树的树枝，而深搜则是在遍历树的节点<br>在解决回溯算法时需要注意的几个问题是：</p><ul><li>路径：即当前已做出的选择</li><li>选择列表：即站在当前节点上，可以做出的选择</li><li>结束条件： 即如何判断已经到达了树的底部，无法再做选择</li></ul><h6 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h6><p>主要的核心操作是在递归调用之前做出选择，将选择从选择列表中删除，在递归之后再撤销已做出的选择。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> option <span class="token keyword">in</span> options<span class="token punctuation">:</span>    <span class="token comment"># 做出选择</span>    将该选择从选择列表中移除    路径<span class="token punctuation">.</span>add<span class="token punctuation">(</span>option<span class="token punctuation">)</span>    backtrack<span class="token punctuation">(</span>路径<span class="token punctuation">,</span> 选择列表<span class="token punctuation">)</span>    <span class="token comment"># 撤销选择</span>    路径<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>option<span class="token punctuation">)</span>    将该选择重新加入选择列表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="T46-全排列"><a href="#T46-全排列" class="headerlink" title="T46 全排列"></a>T46 全排列</h5><p><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/20220629092430.png" alt="全排列"></p><h5 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h5><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> nums<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> temp<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> ans<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">&amp;</span> used<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>used<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            temp<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> ans<span class="token punctuation">,</span> used<span class="token punctuation">)</span><span class="token punctuation">;</span>            temp<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">permute</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> ans<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> temp<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> <span class="token function">used</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> ans<span class="token punctuation">,</span> used<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="T39-组合总和"><a href="#T39-组合总和" class="headerlink" title="T39 组合总和"></a>T39 组合总和</h5><p><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/20220629160803.png" alt="组合总和"></p><h5 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h5><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> nums<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> temp<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> ans<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span> startIndex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            target <span class="token operator">-=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            temp<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> ans<span class="token punctuation">,</span> target<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 撤销选择</span>            target <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            temp<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">combinationSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> candidates<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> temp<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> ans<span class="token punctuation">;</span>        <span class="token function">backtrack</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> ans<span class="token punctuation">,</span> target<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="T40-组合总和2"><a href="#T40-组合总和2" class="headerlink" title="T40 组合总和2"></a>T40 组合总和2</h5><p><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/20220629154746.png" alt="组合总和2"></p><h5 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h5><h2 id=""><a href="#" class="headerlink" title=""></a><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> nums<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> temp<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> ans<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">&amp;</span> used<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span> startIndex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 去重</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> used<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment">// if(nums[i] > target) continue;</span>            temp<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            target <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> ans<span class="token punctuation">,</span> used<span class="token punctuation">,</span> target<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 撤销选择</span>            target <span class="token operator">+=</span> temp<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            temp<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">combinationSum2</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> candidates<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> temp<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> ans<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> <span class="token function">used</span><span class="token punctuation">(</span>candidates<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>candidates<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> candidates<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">backtrack</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> ans<span class="token punctuation">,</span> used<span class="token punctuation">,</span> target<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></h2><p>9.20更新，最近又刷了一些回溯算法的题目，感觉难度还是比较大的。重点还是在于<strong>撤销选择</strong>和<strong>剪枝</strong>这两个操作上。<br>撤销选择是回溯算法的核心思想，所谓回溯就是撤销选择。<br>剪枝则是因为回溯算法本质上是dfs遍历，这样导致时间复杂度往往是极高的，就是暴力搜索，很多时候不能直接通过测试，因此使用剪枝来规避一些没有必要的遍历，从而降低时间复杂度。</p><h4 id="T698-划分为k个相等的子集"><a href="#T698-划分为k个相等的子集" class="headerlink" title="T698 划分为k个相等的子集"></a>T698 划分为k个相等的子集</h4><p><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/20220920100545.png" alt="划分为k个相等的子集"></p><h5 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h5><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> bucket<span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> cur<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 剪枝</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> bucket<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">||</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">>=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 把当前的数放进第i个桶中</span>                bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-=</span> nums<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> k<span class="token punctuation">,</span> cur <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token comment">// 在这里回溯，不行的话就拿出来</span>                bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> nums<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">bool</span> <span class="token function">canPartitionKSubsets</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token function">accumulate</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">%</span> k <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> target <span class="token operator">=</span> sum <span class="token operator">/</span> k<span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">buffer</span> <span class="token punctuation">(</span>k<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>        bucket<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> k<span class="token punctuation">,</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 刷题赎罪 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>朝北的房子也有阳光</title>
      <link href="/2022/06/01/%E6%9C%9D%E5%8C%97%E7%9A%84%E6%88%BF%E5%AD%90%E4%B9%9F%E6%9C%89%E9%98%B3%E5%85%89/"/>
      <url>/2022/06/01/%E6%9C%9D%E5%8C%97%E7%9A%84%E6%88%BF%E5%AD%90%E4%B9%9F%E6%9C%89%E9%98%B3%E5%85%89/</url>
      
        <content type="html"><![CDATA[<p>很久不写博客，可能有两个月的时间。<br>两个月中的头一个月不写博客是忙着和师妹谈恋爱。<br>两个月中的后一个月不写博客是忙着从失恋中走出来。</p><p>今天晚上吃完饭回工位就没来由的一阵累，然后是一阵心悸，焦虑又找上了门。很久没有这种感觉了，这学期过来之后我以为自己已经将自己的心态调整的足够的强大，不仅是因为谈了一段很好的恋爱，还因为对自己的人生有了很明确的规划。研究生三年应该做什么，做到了会怎么样，没做到会怎么样，怎么补救，最坏的出路是什么，都想得一清二楚，念头无比的通达，自然不会焦虑，晚上也能一觉到天亮。</p><p>累了就回宿舍休息，极度疲惫的情况下，似乎走几步路都十分的艰难，挣扎着终于回到宿舍，打开门，一眼看到的是打在墙上的太阳（请大家忽略我的渣渣像素）。<br><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/0E0B80B240869405D32399DE3EF6B002.png" alt="0E0B80B240869405D32399DE3EF6B002"></p><p>在北回归线以北的朝北的房间里，阳光事实上是一种罕见的景色，也难怪我会愣神。放空自己的一段时间，坐在床上静静的看着这难得一见的阳光。直到太阳落山，直到华灯初上。我又在窗前拍下了这样一张天空。<br><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/80692051D4A694E7E5A472CD44AB0F8F.png" alt="80692051D4A694E7E5A472CD44AB0F8F"></p><p>多么华丽的语言也形容不了初见时的惊艳，只能在心中感叹一句，真好看啊。这么色彩层次分明鲜艳有好看的天空和云朵，上次注意到是在什么时候？</p><p>根据科学的常识，北回归线以北朝北的房间中怎么可能照的到阳光？根据生活的常识，一对很爱很爱刚谈了两个月的情侣又如何会分手？</p><p>人力终有穷，生活中有太多的突发情况了。我们永远无法预料到所有生活中可能遇到的各种突发情况。试图通过为所有的突发情况做预案来达到减缓焦虑的目的，只会让事情变得更糟。</p><p>应该怎么调整策略？坐在床上看看太阳可能是一个不错的选择。意外和惊喜在不断的出现，虽然生活中更多的还是平淡的没有阳光的日子，那这些珍贵的阳光的点缀才使得我们的生活熠熠生辉。</p><p>都会好的，朝北的房间中可以照的到太阳，还有什么不可能呢？</p><hr><p>经过考证，朝北的房间中可以照的到太阳的原理是因为创新港的房子并不是正南正北，我所在的这栋楼是坐东南面向西北。没有违背基本的科学原理。我们觉得朝北的房子不可能照的到太阳，有没有想过，房子本身可能不是严格的朝北呢？</p>]]></content>
      
      
      <categories>
          
          <category> 日日谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> normaldays </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>喝茶就是喝茶</title>
      <link href="/2022/04/12/%E8%8C%B6%E5%8F%B6%E5%8F%AA%E6%98%AF%E8%8C%B6%E5%8F%B6/"/>
      <url>/2022/04/12/%E8%8C%B6%E5%8F%B6%E5%8F%AA%E6%98%AF%E8%8C%B6%E5%8F%B6/</url>
      
        <content type="html"><![CDATA[<p>“每次泡茶的时候，静静看着杯中的茶叶浮浮沉沉、一上一下，香气就这样肆意地蔓延开来。看此时杯中沉浮的茶叶，就好比我们起起伏伏的人生。”<br>很经常看到这样的描写。看上去很有道理，但是仔细想想狗屁不通。水泡茶叶是起起伏伏，泡根草一样是起起伏伏，这就能看到我们的人生了？是不是还要引申出生命如草芥？再噫嘘唏一下，还会有寄蜉蝣于天地，渺沧海之一粟的感慨。<br>不至于，朋友，真的不至于。喝茶就是喝茶，生活就是生活。<br>当然，今天写博客的目的不是批判公众号文章。<br>今天的重点是想记录一下我的感情生活。<br>上个月十一号，我恋爱了。是我人生中的第一次恋爱。<br>学妹是一个很可爱的女孩子，她有时候也会夸我可爱。我们是在情人节那天认识的。那天飘着雪花，跟John吃完小贝贝烤面筋和涮菜之后就错过了最后一班回东区的公交车。我已经准备开11路回家了。走到东桥头，这是我第一眼看到学妹。学妹穿的是一件白色的羽绒服，走路一直抬着头，像是一只骄傲的小鸭。然后，我们就在东桥往东的那个公交车站相遇了。天色已晚，我想赶紧回家上线打游戏，于是就跟学妹一块拼车了，顺理成章的加了学妹的微信。<br>在无意的闲聊中，我们发现我们是高中的校友，语文老师是同一个老师，高考分数一样，然后，学妹考研上岸了，我们现在又是西交的校友。<br>高强度的聊天会让人暧昧，而长时间的暧昧会让人产生恋爱的感觉，感觉已经出现了，在一起也是顺理成章的事情。<br>可是这跟茶叶有什么关系？<br>这要说的写这篇博客的前一天。我跟学妹大吵一架。<br>我甚至写了个提纲，在写学妹哪里哪里有问题，然后就是有提纲的吵架。吵完了没有解决问题，昨天晚上集中爆发，我急得跳脚，歇斯底里。学妹直接关机了，于是我只能自己一个人冷静了。<br>冷静下来再分析，我首先，一点也不想跟学妹分手。没有人想初恋只谈一个月，当然这是最浅层的原因。我觉得还是很喜欢学妹。如果就这样分手了，我大概会后悔很长一段时间。<br>我发现我们吵架的原因是我很想要别人说的那种恋爱，发在公众号上的，发在知乎上的，发在抖音上的，甜甜的恋爱。学妹似乎不是会粘人的人。于是产生了冲突。<br>就像我们看到茶叶会想起飘飘浮浮的人生。我们提起恋爱就会想起甜甜的恋爱，天天在一起搂搂抱抱亲亲打游戏。似乎是形成了一种思维定势，我们提到茶叶就觉得他是一个非常有韵味的东西，一定要与某种哲理相结合，一定要从中悟出一些道理；当我提到恋爱也会觉得他是一个十分美好的东西，一定是非常甜非常腻的，两个人最好能天天在一起每天秀恩爱。<br>喝茶就是喝茶，喝了解渴也是茶，喝了悟出哲理的也是茶。谈恋爱就是谈恋爱，甜的腻人的时候是谈恋爱，平平淡淡的时候难道两个人就不相爱了吗。<br>不是这样的吧。<br>喝茶就喝茶，口渴的时候就先解渴，不要再想着从泡茶的过程中悟出一些什么道理了。喝一杯纯粹一点的茶，可以是解渴，也可以是品茗。</p>]]></content>
      
      
      <categories>
          
          <category> 日日谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> normaldays </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>倒霉的一天和带劲的午餐</title>
      <link href="/2022/02/24/%E5%80%92%E9%9C%89%E7%9A%84%E4%B8%80%E5%A4%A9%E5%92%8C%E5%B8%A6%E5%8A%B2%E7%9A%84%E5%8D%88%E9%A4%90/"/>
      <url>/2022/02/24/%E5%80%92%E9%9C%89%E7%9A%84%E4%B8%80%E5%A4%A9%E5%92%8C%E5%B8%A6%E5%8A%B2%E7%9A%84%E5%8D%88%E9%A4%90/</url>
      
        <content type="html"><![CDATA[<h4 id="倒霉的一天"><a href="#倒霉的一天" class="headerlink" title="倒霉的一天"></a>倒霉的一天</h4><p>倒霉的一天是从起床就流鼻血开始的。。。</p><p>昨天吃的太多，今天肚子不是很舒服，早饭就喝酸奶吧，起床去买酸奶。罪大恶极的便利店最便宜的酸奶四块钱一袋。想了想还是接着不舒服吧。。。</p><p>到工位之后发现了一根香蕉。亲爱的读者们是不是觉得有香蕉吃也不错，香蕉也可以促进肠道蠕动，缓解部分肚子不舒服的问题。但是事实上这根香蕉购买于2021.12.25号。即疫情封工位的那一天。我发现这根香蕉的时候他已经是黑色的香蕉干了。。。</p><p>专心学习吧，刷数理统计的课后题。十一点多下班吃饭前看了一个逆天女夹心糖整的逆天活。笑吐了。于是想都没想分享给师妹。然后精准踩雷，上班摸鱼，逆天整活视频。连踩两颗。师妹说恶心的午饭都要吐出来了。我也觉得自己脑子里边的浆糊也要喷射出来了。。。</p><h4 id="带劲的午餐"><a href="#带劲的午餐" class="headerlink" title="带劲的午餐"></a>带劲的午餐</h4><p>今天中午的午餐绝对会是这几年吃过的最最最带劲的午餐。</p><p>饭前听说毛子开始用导弹空袭哈尔科夫和基辅了。去吃米粉，点饭的时候毛子在敖德萨登陆了。米粉做好了，毛子已经打穿哈尔科夫了。米粉吃完了，VDV已经控制基辅了。我还在创新港吃米粉，VDV已经在基辅嗯造炸鸡了？</p><p>吃个饭的功夫啊，乌克兰：啪！没了。</p><p>带劲的午餐。</p>]]></content>
      
      
      <categories>
          
          <category> 日日谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> normaldays </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写在寒假在家的最后一夜</title>
      <link href="/2022/02/18/%E5%86%99%E5%9C%A8%E5%AF%92%E5%81%87%E5%9C%A8%E5%AE%B6%E7%9A%84%E6%9C%80%E5%90%8E%E4%B8%80%E5%A4%A9-md/"/>
      <url>/2022/02/18/%E5%86%99%E5%9C%A8%E5%AF%92%E5%81%87%E5%9C%A8%E5%AE%B6%E7%9A%84%E6%9C%80%E5%90%8E%E4%B8%80%E5%A4%A9-md/</url>
      
        <content type="html"><![CDATA[<p>从上了大学开始，故乡就只有寒暑。</p><p>想到回学校就要五天三门考试；想到回学校就要面对一周一次组会；想到堆了一假期没写的各种大作业就很焦虑。甚至想到回学校就要面对导师分配给我做毕设的师弟都很焦虑（不是我毕业我焦虑个鸡毛）。</p><p>在家真的好舒服啊。每天睡醒吃饭，想看书就随便看会，不想看书就出去打打台球或者偷懒看看小说。</p><p><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/c54c5bb167d8cb2b8e9a9705390669f.jpg" alt="每天高强度军事化训练开学直接把师兄干碎"></p><p>哦对了，在家想打牌就有人打牌，想打麻将就打麻将，想打双升级就打双升级，天天都打。还有初七来我家玩的可爱的小外甥女~真是把心都萌化了。</p><p><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/1cbe55dcf25322267950861781ec8aa.jpg" alt="可爱的小外甥女~~"></p><p>寒假没在家呆很长时间，好像就是从22号到今天吧，一天一天的真是过得太快了，但是好像也已经适应了在家里边生活的这种节奏。甚至在某些程度上，这一个月的闲适生活就又改变了我的一些想法，我甚至开始觉得考个家里边的事业编也不错，去大数据局上班，钱少，但是事少离家近（甚至近到我家走路去上班只要两分钟，从西门出去过条马路就到）。</p><p>临走的前夜，心里边开始有些空落落的，似乎不仅是对家里边的留恋，还有对前路的恐惧和焦虑，但是，你还是需要穿过荆棘，踏过那些野草丛生的路，一点一点朝前走。你要勇敢的面对自己，面对接下来会接受的困难与挑战，因为那就是我，唯一要走的路啊。李垚啊李垚，振作起来啊！新学期加油吧！</p>]]></content>
      
      
      <categories>
          
          <category> 日日谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> normaldays </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一无所有的年纪</title>
      <link href="/2022/01/11/%E4%B8%80%E6%97%A0%E6%89%80%E6%9C%89%E7%9A%84%E5%B9%B4%E7%BA%AA/"/>
      <url>/2022/01/11/%E4%B8%80%E6%97%A0%E6%89%80%E6%9C%89%E7%9A%84%E5%B9%B4%E7%BA%AA/</url>
      
        <content type="html"><![CDATA[<p>在这个一无所有的年纪，有很多事情说起来都特别的羞耻。</p><p>我本应该是一个很热爱生活的人。但是我不知道每天早上为什么要起床，就像不知道每天晚上为什么要睡觉。每天晚上睡前都怕自己长眠不起，似乎能听到心脑血管对熬夜的抗议，可是又一刻不敢停的把自己投入到碎片化的低廉的奶头乐中恨不得溺死其中，稍一抬头就感觉现实中的压力和不快扑面而来，做噩梦已经成了一种习惯，好像已经很久没有一个真正的好的睡眠了，所以你看，有的人活着，就像死了。<br>人是其一切社会关系的总和，活着活着，就没有了自我。之所以不想长眠不起，一定程度上因为还有关心我的爸爸妈妈，他们为我付出巨大然而还未得到我的丝毫回报。之所以不想长眠不起，还有可能是因为这个世界上还有很多很多我看不惯的人，一觉长眠不起未免遭人耻笑。之所以不想长眠不起，也有一部分是因为人的求生本能，活着很累，但是死亡的未知好像更让人害怕。</p><p>不知道自己在胡思乱想什么，就像不知道自己在忙忙碌碌的做什么。不知道自己还在期待什么，不知道自己应该期待什么。没有人给我一个模板化的人生，20多岁的大男孩应该干些什么，法理上的成年人，心理上，大概还是个没有断奶的巨婴。</p><p>20多岁的年龄，我好迷茫。</p><p>偶尔看见宿舍楼下耳鬓厮磨的情侣，会感叹爱情真好，20多岁的年纪正值青春年少应该有甜甜的恋爱；有时也会听说同学今年又发了多少年终奖，也会感叹有钱真好，20多岁的年纪正是年少有为应该在职场上大展身手；经常也会聊到隔壁组哪个大佬转博了或者发了什么顶会顶刊，又会感叹多学点知识真好，20多岁的年纪正是科研的黄金时期应该在这时候攒下科研路上的第一桶金。可我的20多岁除了怨天尤人别的什么都没有，好像很久都没有做过什么让自己满意的事情了，像烂在下水道里的一具腐臭的尸体。</p><p>有很多应该去做的事情啊，老板交待的活没干，作业没写，考试没复习，题也没刷。这样的我，又凭什么让自己满意呢。还有很多应该做的事情啊，好害怕，所以先看会小说麻痹一下自己吧。疫情只是借口，实则是像具尸体一样的自己身上散发着名为懒惰的腐臭味。这样的自己，凭什么能睡个好觉。</p><p>新的一年，希望能够对得起自己，也扎扎实实地做几件让自己满意的事情。或许也应该希望能有一个好的睡眠，希望能够多散发些温度。再不济，也应该接受自己平庸的20多岁，继续在这个一无所有的年纪里徘徊打转。</p>]]></content>
      
      
      <categories>
          
          <category> 日日谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> normaldays </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新年快乐！</title>
      <link href="/2021/12/31/%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90%EF%BC%81/"/>
      <url>/2021/12/31/%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<p>新年快乐！年年有今日，岁岁有今朝！</p><h3 id="南航篇"><a href="#南航篇" class="headerlink" title="南航篇"></a>南航篇</h3><p>从头而论的话，今年的开始还是得从南航说起。今天晚上在宿舍跟室友一块吃饭突然想起来当时在南航跨年都是有篝火的，突然就好想念南航。</p><p>去年这个时候，应该是刚考完研？好像在宿舍摆烂。感觉自己考得不是很好，就还在纠结到底是去上班还是二战。稀里糊涂的在学校摆了几天烂，因为害怕被疫情困在本地过年，就赶紧回家了。回家之后的生活也没啥意思，就是每天吃吃喝喝睡睡。也算是度过了一个很快乐的春节吧。很快，过完了春节就是查分的日子，好像是正月十五当天，也是返校的日子，也是查分的日子。西交是早上八点钟公布分数，前一天晚上睡得出乎意料的好，但是第二天早上三点就醒了，一直听说小道消息说会提前放分，然后就一直紧张的不断刷新，好像是七点多钟？分数查出来了，397分。比我预估的高了二三十分吧，高兴的直接跳了起来。</p><p>但是没高兴多久，很快的，考研群里边发了一个投票，就发现这个分数好像也不是很高。更快的，发现好像只能排80名左右，但是只能录取40个人。只能说是寄了。但是，当时想考研群里边总是有水分。所以还是在忐忑不安的心情里边去了学校。在研友们的鼓励下（在此感谢肖维佳鑫，郭钊利，徐新雨等人，最后大家都有非常不错的前途，也都算是如愿以偿），还是积极的开始准备复试了。还好毕设老师叶老师人也是非常的好，跟我们说先去准备复试，复试完再来做毕设也可以。所以，就还是开始准备复试。从来没有学过信号与系统，但是当时就是拿着奥本海姆的那本大绿书默默的啃。西交的复试比较晚，学到最后，图书馆只剩我自己了。每天固定的坐三楼窗户前边，看着玉带河的水，刷着三一。</p><p><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/6298dd074db6f41290cde76d6b3a916.jpg" alt="玉带河的水不脏的时候还是很干净的"></p><p>然后就去西安复试吧，上飞机前的一瞬间，接了一个之前联系的航院的老师的电话，说航院今年没有调剂名额了。说实话还是挺绝望的。但是也算是破釜沉舟吧，复试的发挥还算不错。虽然复试完直接灰溜溜的跑回家了。回家不到两天就放榜了，竟然逆袭了。</p><p><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/e371125fa8207ff6f2df6af7ebac628.jpg" alt="复试完回家玩的时候拍的花"></p><p>然后就回学校了。回学校不到一周，就是毕设的中期答辩。所以直接被叶老师抓去实验室做毕设。（然而中期答辩的时候还是只有一百多行代码，开局一张图，后边的全靠编hhhh）在峰哥，吴哲学长和亲爱的叶老师的帮助下，也算是磕磕绊绊的完成了毕设的内容。在此也感谢叶老师对我的指导，包括学术上和人生上。做完毕设之后，突然就感觉自己好像要毕业了。匆匆忙忙的答辩完，吃了毕业饭，拍了毕业照，稀里糊涂的，就毕业了。</p><p><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/e23b921d905da45bea5f1844d72b61b.jpg" alt="看我高超的摄影技巧"></p><p>大家也拉着行李箱，各奔东西啊。哲哥，朱施平和想响去上班了，杨建铧，肖维这些人留在了南航读研。天下没有不散的宴席啊，就，暂告一段落吧！</p><h3 id="暑假篇"><a href="#暑假篇" class="headerlink" title="暑假篇"></a>暑假篇</h3><p>感谢吕老师，没有暑假就把我叫去学校，给了我一个完整的长达三个月的暑假hhhh。</p><p>回家本来说是要学车，但是，先是7.20极端暴雨（真的是从小到大也没见过这么大的雨啊,嵩山上都直接挂起了瀑布）</p><p><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/CF44E3D773D24AB817B6EC56F5F12C96.png" alt="雨后的嵩山，见过的都说好看"></p><p>暴雨之后是新冠疫情的突然来袭，然后驾校就被停了，我的科三，我的驾照，他又没了。</p><p>很快啊，在家封闭的一个月，九月初就开学了，可能是人生中最后一个暑假？明年的年终总结就来解读一下是不是真的是人生中的最后一个暑假。</p><h3 id="创新港篇"><a href="#创新港篇" class="headerlink" title="创新港篇"></a>创新港篇</h3><p>开学就来到了创新港，单论生活条件的话，创新港的的确确是国内高校的顶级享受，吕老师对我还算不是很push，师兄师姐对我也很照顾，同门人也都很好。</p><p>生活在创新港的生活还是很闲适的，创新港在郊区，没有太多的课外生活，每天上上课，去工位学学习，跟师兄和同门一块吃饭，偶尔也去道科吃顿好的（其实也不算偶尔去，还是挺经常去的）</p><p>逐渐逐渐的，也适应了在创新港的这种生活。创新港的落日，创新港的月亮，也在创新港看了西安的第一场雪。</p><p><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/e7028b14719caf715ab59a0afcc7ad8.jpg" alt="创新港的落日"></p><p><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/f0ab7790db9b94bccdb39d3db1ddc82.jpg" alt="创新港的雪"></p><p><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/e804174f2986722d91d64fdebe9267f.jpg" alt="创新港的月"></p><p><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/aeb7a291d9126d61bbdf4f3fb69d419.jpg" alt="还有创新港的鸽"></p><p>仓促间也不知道怎么描述在创新港的生活，就先写到这里吧！今年的跨年是很特殊的一年，在疫情中度过了2021年的最后一天，2021年的最后一天做了两次核酸。希望疫情尽快过去，能够回家过年吃上想吃的饭！也希望新的一年，能学到更多的知识，开开心心，平安顺遂！</p><p>再见了2021！你好2022！</p>]]></content>
      
      
      <categories>
          
          <category> 日日谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> normaldays </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最近的生活碎片3</title>
      <link href="/2021/12/17/%E6%9C%80%E8%BF%91%E7%9A%84%E7%94%9F%E6%B4%BB%E7%A2%8E%E7%89%873/"/>
      <url>/2021/12/17/%E6%9C%80%E8%BF%91%E7%9A%84%E7%94%9F%E6%B4%BB%E7%A2%8E%E7%89%873/</url>
      
        <content type="html"><![CDATA[<p>12.17号创建的文件拖到现在再写也真是没谁了……</p><h4 id="第一件事"><a href="#第一件事" class="headerlink" title="第一件事"></a>第一件事</h4><p>上周没有喊累，因为累了就休息。<br>一时休息一时爽，一直休息一直爽。<br>但是，代价就是作业全都没做。这周好像就做了一个数理统计的作业，老师上周说的文章也没看，感觉自己老是在忙一些奇奇怪怪的事情。不知道为什么。还是要好好看！<br>这周末要把作业全部搞定。然后下周一定好好看网络跑代码！说不摸鱼就不摸鱼。</p><h4 id="第二件事"><a href="#第二件事" class="headerlink" title="第二件事"></a>第二件事</h4><p>创新港封校了。离谱。还好在封校前一天出去跟师兄一块吃了一个川湘宴。大肘子永远的神！<br>感觉疫情之后好多事情都变化好大啊。以前根本不敢想，随时刷新毒圈，一个一线或者二线大城市，说封就封。这种随机来袭的事件是对中国基层治理能力的一次彻彻底底的检验。是骡子是马拉出来遛遛。有的地方发现疫情就能迅速控制迅速的将疫情扑杀，而有的则需要一直拖延到造成一定规模的社区传播不得不封城。</p><p>这里就不得不讲几个西安笑话：<br>建议广大市民非必要不展码，不亮码。——我没事自己整个健康吗在家扫着玩？<br>是否自愿放弃考研 本人已知晓可能带来的风险并愿意承担相应责任。——这有哪个字是人该说出来的话？<br><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/13abb0a5cc4b4d9e4a1457667fde50f.jpg" alt=""></p><p>但是还是祝福西安赶紧战胜疫情！虽然已经不敢奢望今年能回家过年了……可能是第一年不回家过年。<br><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/97f1794635f3caba0d64f932806049a.jpg" alt=""></p><h4 id="第三件事"><a href="#第三件事" class="headerlink" title="第三件事"></a>第三件事</h4><p>这周有好几个bigbig月亮，周日出去吃饭的时候正好是农历的十五，以为是2021年最后一轮圆月。没想到竟然幸运的遇上了蓝月亮，周一晚上的月亮也这么圆啊！<br><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/e804174f2986722d91d64fdebe9267f.jpg" alt="这个是周一的月亮"><br><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/7a5cefaeb6db0827c8da246bd9632ae.jpg" alt="这是周日的月亮"><br>看星星看月亮真的是一件很震撼的事情，当你低着头往餐厅走去准备吃饭时，抬头一看，映入眼帘的是一轮巨型的月亮。还是会有一种江畔何人初见月，江月何年初照人的哲思？或者说隔千里兮共明月的相思？</p><h4 id="第四件事"><a href="#第四件事" class="headerlink" title="第四件事"></a>第四件事</h4><p>明天就是考研的日子了，好紧张啊。</p><p>现在想想，好像考研也是很久之前的事了，但好像也没多久，在家复习，在崇高路桥头复习，在图书馆复习的日子似乎还是历历在目。似乎还能闻得见咖啡的香味，闻得见跟某只🕊一块整的薯条和炸鸡……</p><p>今年还是有不少朋友考研的。祝福他们都能考上！</p>]]></content>
      
      
      <categories>
          
          <category> 日日谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> normaldays </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最近的生活碎片-第二期</title>
      <link href="/2021/12/09/%E6%9C%80%E8%BF%91%E4%BA%8C%E4%B8%89%E4%BA%8B/"/>
      <url>/2021/12/09/%E6%9C%80%E8%BF%91%E4%BA%8C%E4%B8%89%E4%BA%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="第一件事"><a href="#第一件事" class="headerlink" title="第一件事"></a>第一件事</h4><p>以后尽量把这个栏目办成周更的，每周五更新（好的，虽然这个文件周四就创建了，但是现在在写这篇文章的时候已经是周日了）。</p><h4 id="第二件事"><a href="#第二件事" class="headerlink" title="第二件事"></a>第二件事</h4><p>今天是十分倒霉的一天。早上起床有落枕的感觉，中午起床穿鞋的时候，腿又抽筋。。。（这句是周四写的）<br>现在总是经常性地感到累。我好累啊，仿佛已经成了一种习语没事就挂在嘴边说两句，我好累啊。但是仔细想想自己累吗。好像真的挺累的。但是在仔细想想，自己好像啥也没干啊，就好累了。我把这种事情归结于精力被很多不重要的琐事给占用了。每天睡到九点半起床到实验室，有效工作时间不到两个小时就去吃饭。中午吃完饭回宿舍不睡觉玩手机，导致下午到工位就很累啥也看不进去，于是安慰自己不如摸会鱼看会手机，看到五点钟去吃饭，吃完饭又去打球到晚上十点，回宿舍又觉得自己天天不在宿舍好累啊，自我感动，于是决定明天要晚点上班，然后第二天早上九点半起，周而复始。但是再想想这一天一天的，其实啥都没干，以后一定要减少不重要的事情的时间开支。<br>所以下周一定要开始改变了。</p><ul><li>[ ] 早上八点半起床，九点前到实验室</li><li>[ ] 晚上不要老是上去打球，每周只打两次</li><li>[ ] 坚持每天刷一道leetcode</li></ul><h4 id="第三件事"><a href="#第三件事" class="headerlink" title="第三件事"></a>第三件事</h4><p>鸡同鸭讲真是十分痛苦的事情。（本人此处并不针对某l老师）<br>周六开组会，周日从十点上课到晚上九点。就挺离谱的。更离谱的是周六晚上开组会也不听，周日上课还是不听。以后再开组会，就是好的好的好的，嗯嗯嗯。迅速结束组会。<br>万幸中的万幸，下下周数理统计就可以上完了。再熬两周！</p><h4 id="第四件事"><a href="#第四件事" class="headerlink" title="第四件事"></a>第四件事</h4><p>这周刚开始时疯狂想吃烧饼夹卤大肠。周中间非常想吃烤的大肠。现在就是非常想吃干煸肥肠。等于说这周就是跟大肠干上了。<br>创新港这边有两家麻辣烫，一家是杨国福，一家是张亮（可以把创新港换成中国任何一个地名，这句话也能成立）。杨国福的汤没有张亮好喝，张亮的麻酱没有杨国富好吃。于是，在这个寒冷，劳累，<del>充满了收获</del>（啥都没干）的周日，我和同门一块去吃了鸡公煲。教师公寓的鸡公煲还是很好吃的。希望下周推出新品肥肠煲，我一定去尝一下。</p>]]></content>
      
      
      <categories>
          
          <category> 日日谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> normaldays </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最近的生活碎片</title>
      <link href="/2021/12/03/%E6%9C%80%E8%BF%91%E7%9A%84%E7%94%9F%E6%B4%BB%E7%A2%8E%E7%89%87/"/>
      <url>/2021/12/03/%E6%9C%80%E8%BF%91%E7%9A%84%E7%94%9F%E6%B4%BB%E7%A2%8E%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h4 id="第一件事"><a href="#第一件事" class="headerlink" title="第一件事"></a>第一件事</h4><p>读研真的是一件很考验心理素质的事情。<br>还好，偶尔的我也能去喂一喂鸽子放松一下。<br>尽管鸽子飞到手上的那一瞬间压力是直接拉满了的。<br><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/20211130_062649350_iOS.jpeg" alt="20211130_062649350_iOS"><br><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/20211130_062933461_iOS.jpeg" alt="20211130_062933461_iOS"></p><p>最多的时候，我的一只胳膊上站了三只鸽子。但是他们竟然真的不咬人hhh。虽然他们尖利的爪子还是划伤了我稚嫩的皮肤。</p><h4 id="第二件事"><a href="#第二件事" class="headerlink" title="第二件事"></a>第二件事</h4><p>前天晚上跟师兄和同门一块去吃了火锅。在一个叫西张一村的繁华镇子。给我一种小时候镇上集市的感觉，这种奇怪的熟悉感是南京永远找不到的。十五块钱十斤的苹果更是南京不可能拥有的。从这方面来说好像来西安上学也是一个还不错的选择。88块钱两斤的鲜切羊肉吃不了上当，遂决定下周继续去吃。<br>现在的作息完全是很奇怪的，周五上课，周六开组会，周日上课，周一上课。每次周一上完课，虽然是在周一，但都有一种像周五一样如释重负的感觉。现在周二周三反而过的像周末一样。</p><h4 id="第三件事"><a href="#第三件事" class="headerlink" title="第三件事"></a>第三件事</h4><p>该死的机器学习课终于完事了。在周二从网上偷完最后一次作业的代码之后就有一种如释重负的感觉。仿佛便秘了一周终于拉了个干干净净。<br>没想到上了研究生也有这种课，这种老师。当然，上了研究生之后多的是让我惊讶的事情。就教学质量来说，或者单论起这个课的教学质量来说，还真是跟当时机电的那几个五毒老师差不多了。这老师一直在群里边发表一些奇怪言论，我真的好奇他是不是反串的啊。</p><h4 id="第四件事"><a href="#第四件事" class="headerlink" title="第四件事"></a>第四件事</h4><p>昨天跟师兄师姐聊天，他们说，你下一步要做什么，还是要看你要接着读博还是想找工作。</p><p>对这件事情完全是迷茫的。</p><p>因为我很羡慕在互联网大厂年薪零点几伯的师兄师姐，但是，另一方面，我觉得互联网寒冬很有可能就会在这几年中的某一天不期而至（就算不来，每天上班也是提心吊胆的；例如新东方，一纸文件就死的透透的），其次，我对自己能否接受996的工作制度表示十分的没有信心。</p><p>同时，我也很想能拿到最高的学术头衔。那可是博士啊。但是，这种想读博的意愿似乎不是因为对学术的热爱。也许仅仅是因为想要拿到那个学位。也许从某方面来讲似乎还是虚荣心作祟。读完博之后也不会特别正经的搞科研项目什么的，也许就是找个大中专院校当个不太忙的老师，躺平就好了。</p><p>想不明白。也不想想。想的太多落空的可能就越多。只能随波逐流，浪把我推到哪就是哪了。</p>]]></content>
      
      
      <categories>
          
          <category> 日日谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> normaldays </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习与数据挖掘考试复习</title>
      <link href="/2021/11/19/review-of-dmml/"/>
      <url>/2021/11/19/review-of-dmml/</url>
      
        <content type="html"><![CDATA[<h2 id="引言之前"><a href="#引言之前" class="headerlink" title="引言之前"></a>引言之前</h2><p>这门课谁选谁傻逼<br>如果你恨一个人，那就快让他来选zjk老师的机器学习与数据挖掘吧！<br>明年一定不选了</p><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><h4 id="1-数据挖掘中知识发现的几个步骤。"><a href="#1-数据挖掘中知识发现的几个步骤。" class="headerlink" title="1.数据挖掘中知识发现的几个步骤。"></a>1.数据挖掘中知识发现的几个步骤。</h4><ul><li><p>确定知识发现的目标：确定知识发现的目的，要发现哪些知识。</p></li><li><p>数据采集： 从网络爬虫、数据库导出、CSV文件等数据源获取目标数据采集到指定的系统中。“数据质量决定数据挖掘的上限，而算法仅仅是逼近这个上限。”</p></li><li><p>数据探索：采集到的数据往往不可以直接使用，需用采用可视化技术，将数据的特征展现出来，探索数据特征的基本统计描述、数据特征间的相似性/相异性。</p></li><li><p>数据预处理：主要包括数据清理、数据集成、数据规约、数据变换和离散化等几个部分(1) 数据清理：主要包括缺失值与异常值的清理(2) 数据集成：将多种数据源集到一起，放在一个数据仓库的过程。在数据集成的过程中会出现实体识别（Entity Resolution）、冗余属性识别、数据值冲突等问题。(3) 数据规约：在保证原始数据信息不丢失的前提下，减少分析使用的数据量。数据规约中最常使用的方式是维归约。维归约的含义是将原先高维的数据合理地压缩成低维数据，而减少数据量，常用的方法为特征的提取，如线性判别分析LDA和主成分分析PCA。(4) 数据的变换：将原始的特征数据进行归一化和标准化的操作。(5) 数据的离散化可通过聚类、直方图、分箱等方法完成。</p></li><li><p>数据挖掘（模型选择）：对预处理后的数据进行挖掘的过程。传统的数据挖掘将算法大体分为有监督的学习与无监督的学习两种。</p></li><li><p>模型评估：对数据挖掘结果的评价，也是评价模型效果好与坏的标准，常见的评估指标有精度、召回率等。</p></li><li><p><a href="https://blog.csdn.net/Codeoh/article/details/108816809">原文链接</a></p></li></ul><h4 id="2-数据挖掘的应用"><a href="#2-数据挖掘的应用" class="headerlink" title="2.数据挖掘的应用"></a>2.数据挖掘的应用</h4><ul><li>目标检测</li><li>文本识别</li><li>语音识别</li><li>自动驾驶</li><li>疾病诊断</li><li>社交网络推荐</li><li>……</li></ul><h2 id="学习的可行性"><a href="#学习的可行性" class="headerlink" title="学习的可行性"></a>学习的可行性</h2><h4 id="1-Hoeffding不等式"><a href="#1-Hoeffding不等式" class="headerlink" title="1. Hoeffding不等式"></a>1. Hoeffding不等式</h4><p>Hoeffding不等式给出了随机变量【的和】(随机变量的和)与其期望值偏差的概率上限。</p><h5 id="一般形式："><a href="#一般形式：" class="headerlink" title="一般形式："></a>一般形式：</h5><p>令$X_1,……,X_n$为独立的随机变量，且有$X_i\in [a,b]$，$i=1,……,n$。这些随机变量的和为：</p><script type="math/tex; mode=display">S_n=X_1+X_2+…+X_n</script><p>此时，霍夫丁不等式可表示为：</p><script type="math/tex; mode=display">\forall t>0,P(S_n-E[S_n]\geq t)\leq exp({-\frac{2t^2}{\sum_{i=1}^{n}(b_i-a_i)^2}})</script><h4 id="2-使用Hoeffing不等式说明学习的可行性"><a href="#2-使用Hoeffing不等式说明学习的可行性" class="headerlink" title="2. 使用Hoeffing不等式说明学习的可行性"></a>2. 使用Hoeffing不等式说明学习的可行性</h4><p>关键是从$h(x)$在训练样本上的错误率推导到对于全体样本的错误率。由霍夫丁不等式可知这两个错误率是PAC的，所以，当对于训练样本，$h(x)$的错误率可以接受时，对于全体样本，$h(x)$的错误率就也就还凑合。</p><p>假设有一个假设空间$H$，机器学习的任务可以抽象为从训练样本$D$中学习到一个函数$h(x)$，使得这个函数与目标函数$f(x)$相等，此训练样本中包括$N$个样本。当学习到的函数$h(x)=f(x)$时，认为是正确的。但是我们不关注正确的情况，我们关注的是错误率。在这里，定义两个错误率：$E<em>{in}(h \neq f)$代表$h$在训练样本上的错误率；$E</em>{out}(h \neq f)$代表$h$在全体样本上的错误率。由Hoeffding不等式：</p><script type="math/tex; mode=display">P[|E_{in}(h\neq f)-E_{out}(h\neq f)|\geq \epsilon]\leq 2exp(-2\epsilon^2N)</script><p>其中，$N$为训练样本集中的样本数。当$N$足够大时，$P[\lvert \E<em>{in}(h\neq f)-E</em>{out}(h\neq f) \rvert \geq \epsilon]\simeq 0$，可以认为$h(x)$对于训练样本的错误率和对于全部样本的错误率是PAC的。此时，机器学习是可行的。</p><h2 id="数据与数据预处理"><a href="#数据与数据预处理" class="headerlink" title="数据与数据预处理"></a>数据与数据预处理</h2><h4 id="1-有哪四种不同的属性类型？分别可以进行什么操作？"><a href="#1-有哪四种不同的属性类型？分别可以进行什么操作？" class="headerlink" title="1.有哪四种不同的属性类型？分别可以进行什么操作？"></a>1.有哪四种不同的属性类型？分别可以进行什么操作？</h4><ul><li>标称属性：标称属性的值往往代表了物体的某种状态，不具有有意义的序而且不是定量的。如人类的头发颜色，可分为黑色，黄色，棕色，金色等；对标称属性的值一般进行众数，熵，列联相关，卡方检验操作。</li><li>序数属性：序数属性的值之间具有有意义的序，但是相继值之间的差未知。比如买衣服分为小号，中号和大号。对于序数属性的值，一般进行求中值，求百分位，秩相关，游程检验，符号检验等操作。</li><li>区间标度属性：区间标度属性首先是一种数值属性，可以用实数值表示，可以计算不同值之间的差值，但是，区间标度属性不做比例讨论，比如温度和日期；对于区间标度属性，我们一般采用均值，标准差，皮尔逊相关，t和F检验等操作。</li><li>比例标度属性：比例标度属性也是一种数值属性，但是这种属性的值可以描述一个值与另一个值之间的倍数关系，如货币，重量，高度等；对于比例标度属性的值，我们一般进行几何平均，调和平均，百分比变差等操作。<br><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/3.png" alt="2"></li></ul><h4 id="2-非对称属性？"><a href="#2-非对称属性？" class="headerlink" title="2.非对称属性？"></a>2.非对称属性？</h4><p>非对称属性是指，只有非零数据属性重要的属性，比如二元属性就是一种非对称属性。</p><h4 id="3-数据对象之间的相似度和相异度计算。（可能会考计算？）"><a href="#3-数据对象之间的相似度和相异度计算。（可能会考计算？）" class="headerlink" title="3.数据对象之间的相似度和相异度计算。（可能会考计算？）"></a>3.数据对象之间的相似度和相异度计算。（可能会考计算？）</h4><p>相似度：评价两个数据对象之间有多相似，通常落在区间[0,1]上。<br>相异度：评价两个数据对象之间有多不同，最小值通常为0，最大值可能为$+\infty$<br>为了评价相似度和相异度，通常引入邻近性的概念。</p><h5 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h5><p><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/2.png" alt="2"><br>（第一行是标称属性，第二行是序数属性，第三行是区间或者比例属性）</p><h4 id="4-数据预处理的主要任务。"><a href="#4-数据预处理的主要任务。" class="headerlink" title="4.数据预处理的主要任务。"></a>4.数据预处理的主要任务。</h4><ul><li>数据清洗</li><li>数据整合</li><li>数据转化</li><li>数据约减</li><li>数据离散化</li><li><p>数据清理（data cleaning）例程通过填写缺失的值，光滑噪声数据，识别或删除利群点，并解决不一致性来清理数据。如果用户认为数据是脏的，则他们可能不会相信这些数据上的挖掘结果。此外，脏数据可能使挖掘过程陷入混乱，导致不可靠的输出。尽管大部分挖掘例程都有一些过程用来处理不完整数据或噪声数据，但是他们并非总是鲁棒的（Robust,系统的健壮性）。相反，他们更致力于避免被建模的函数过分拟合数据。因此，一个有用的预处理步骤旨在使用数据清理例程处理你的数据。分析使用来自多个数据源的数据，涉及集成多个数据库、数据立方体或文件，即数据集成（data integration）。代表同一概念的属性在不同的数据库中可能具有不同的名字，导致不一致性和冗余。命名的不一致还可能出现在属性值中。包含大量冗余数据可能降低知识发现过程的性能或使之陷入混乱。显然，除了数据清理之外，必须采取措施避免数据集成时的冗余。通常，在为数据仓库准备数据时，数据清理和集成将作为预处理步骤进行。还可以再次进行数据清理，检测和删去可能由集成导致的冗余。在为分析而选取的数据集是巨大的，这肯定会降低数据挖掘过程的速度。数据归约可以降低数据集的规模，而又不损害数据挖掘的结果。数据归约（data reduction）得到数据集的简化表示，它小得多，但能够产生同样的（或几乎同样的）分析结果。数据归约策略包括维归约和数值归约。在维归约中，使用数据编码方案，以便得到原始数据的简化或“压缩”表示。例子包括数据压缩技术（例如，小波变换和主成分分析），以及属性子集选择（例如，去掉不相关的属性）和属性构造（例如，从原来的属性集导出更有用的小属性集）。在数值归约中，使用参数模型（例如，回归和对数线性模型）或非参数模型（例如，直方图、聚类、抽样或数据聚集），用较小的表示取代数据。对于数据挖掘而言，离散化与概念分层产生是强有力的工具，因为它们使得数据的挖掘可以在多个抽象层上进行。规范化、数据离散化和概念分层产生都是某种形式的数据变换（data transformation）。数据变换操作是引导挖掘过程成功的附加的预处理过程。</p><h4 id="5-处理缺失值的方法。"><a href="#5-处理缺失值的方法。" class="headerlink" title="5.处理缺失值的方法。"></a>5.处理缺失值的方法。</h4></li><li><p>删除数据对象或者属性 一种简单而行之有效的方法就是直接删除具有遗漏值的数据对象。然而，即使是不完整的数据对象中也可能包含着一些有用的信息，并且，如果许多对象都有遗漏值，则很难甚至不可能进行可靠的分析。因此，在进行删除操作时应该谨慎的考虑是否合算。</p></li><li>估计遗漏值 有时，遗漏值何以可靠的估计。例如，考虑大致以平滑方式变化的，具有少量但分散遗漏值的时间序列时，可以通过其他存在的值对遗漏值进行插值操作。如果属性值是连续的，可以取平均值进行代替，如果属性是分类的，则可以使用最近邻中最经常出现的属性值。</li><li>在分析时忽略缺失值 直接将缺失值置零，除非遗漏值的数量很大，否则这样处理的误差并不大。</li></ul><h2 id="决策树学习"><a href="#决策树学习" class="headerlink" title="决策树学习"></a>决策树学习</h2><h4 id="1-决策树学习的基本思想"><a href="#1-决策树学习的基本思想" class="headerlink" title="1.决策树学习的基本思想"></a>1.决策树学习的基本思想</h4><p><a href="https://blog.csdn.net/uonele/article/details/87883111">原文链接</a><br>决策树又称为判定树，是运用于分类的一种树结构，其中的每个内部节点代表对某一属性的一次测试，每条边代表一个测试结果，叶节点代表某个类或类的分布。决策树的决策过程需要从决策树的根节点开始，待测数据与决策树中的特征节点进行比较，并按照比较结果选择选择下一比较分支，直到叶子节点作为最终的决策结果。<br>本质上，决策树算法就是不断地在数据集中寻找最优划分的过程，使划分后得到的子数据集的不确定性不断下降，直到分类完成。</p><h4 id="2-分类错误率，熵，信息增益，如何根据不同的度量选择最佳划分"><a href="#2-分类错误率，熵，信息增益，如何根据不同的度量选择最佳划分" class="headerlink" title="2.分类错误率，熵，信息增益，如何根据不同的度量选择最佳划分"></a>2.分类错误率，熵，信息增益，如何根据不同的度量选择最佳划分</h4><p>分类错误率：</p><script type="math/tex; mode=display">错误率=\frac{错误预测数}{预测总数}</script><p>熵：信息熵使度量样本集合纯度最常用的一种指标。假定当前样本集合$D$中第$k$类样本所占的比例为$p_k(k=1,2,3…,\lvert \gamma \rvert)$，则$D$当前的信息熵定义为：</p><script type="math/tex; mode=display">Ent(D)=-\sum_{k=1}^{|\gamma|}p_klog_2p_k</script><p>信息增益：假定离散属性$a$有$V$个可能的取值$\left\lbrace a^1,a^2,…,a^V \right\rbrace$，若使用$a$来对样本集$D$进行划分，则会产生$V$个分支节点，其中第$v$个分支节点包含了$D$在属性$a$上的所有取值为$a^v$的样本，记为$D^v$，计算$D^v$的信息熵，在考虑不同分支节点包含的样本数不同对分支节点赋予权重，即可计算出用属性$a$对样本集$D$进行划分得到的信息增益:</p><script type="math/tex; mode=display">Gain(D,a)=Ent(D)-\sum_{v=1}^{V}\frac{|D^v|}{|D|}Ent(D^v)</script><p>无论使用什么度量进行表述，我们都希望决策树的分支结点所包含的样本尽可能属于同一类别，即不纯度越低越好。</p><h4 id="3-缺失值对决策树的影响"><a href="#3-缺失值对决策树的影响" class="headerlink" title="3.缺失值对决策树的影响"></a>3.缺失值对决策树的影响</h4><p>缺失值对决策树的影响体现在三个方面：</p><ul><li>影响不纯度的计算</li><li>影响属性含有缺失值的实例向子结点的分类</li><li>影响属性含有缺失值的测试实例的分类<br><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/4.png" alt="4"></li></ul><h4 id="4-给定混淆矩阵，分类效果度量不同指标的含义和计算方法。"><a href="#4-给定混淆矩阵，分类效果度量不同指标的含义和计算方法。" class="headerlink" title="4.给定混淆矩阵，分类效果度量不同指标的含义和计算方法。"></a>4.给定混淆矩阵，分类效果度量不同指标的含义和计算方法。</h4><p><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/5.png" alt="5"></p><script type="math/tex; mode=display">Recall=\frac{TP}{TP+FN}</script><script type="math/tex; mode=display">Acurracy=\frac{TP+TN}{TP+FN+TN+FP}</script><h4 id="5-评估分类器性能的留一法和k折交叉验证"><a href="#5-评估分类器性能的留一法和k折交叉验证" class="headerlink" title="5.评估分类器性能的留一法和k折交叉验证"></a>5.评估分类器性能的留一法和k折交叉验证</h4><ul><li>留一法：假定数据集D中包含m个样本，若令k=m，则得到了交叉验证法的一个特例：留一法（Leave-One-Out，简称LOO）。显然，留一法不受随机样本划分方式的影响，因为m个样本只有唯一的方式划分为m个子集——每个子集包含一个样本；留一法使用的训练集与初始数据集相比只少了一个样本，这就使得在绝大多数情况下，留一法中被实际评估的模型与期望评估的用D训练出的模型很相似。因此，留一法的评估结果往往被认为比较准确。</li><li>k折交叉验证：首先，将数据集$D$划分为$k$个大小相等的部分，然后使用每种分类方法在$k-1$份数据上构建模型，并在剩余的划分上进行检验，将这个步骤重复$k$次，每次使用不同的划分进行检验。</li></ul><h4 id="6-过拟合和欠拟合"><a href="#6-过拟合和欠拟合" class="headerlink" title="6.过拟合和欠拟合"></a>6.过拟合和欠拟合</h4><p><a href="https://blog.csdn.net/qq_42012732/article/details/107318550">原文链接</a><br>过拟合：具体表现就是最终模型在训练集上效果好；在测试集上效果差。模型泛化能力弱。<br>欠拟合：欠拟合是指对训练样本的一般性质尚未学好。在训练集及测试集上的表现都不好。</p><h2 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h2><h4 id="1-神经网络如何学习-有何特点"><a href="#1-神经网络如何学习-有何特点" class="headerlink" title="1.神经网络如何学习 有何特点"></a>1.神经网络如何学习 有何特点</h4><h5 id="如何学习"><a href="#如何学习" class="headerlink" title="如何学习"></a>如何学习</h5><p>神经网络的学习指的是从训练数据中自动获取最优权重参数的过程。学习的目的是以损失函数为基准，找出能使它的值达到最小的权重参数，采用函数斜率的梯度法可以找出使损失函数尽可能小的权重参数的值。</p><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ul><li>人工神经网络由许多相互连接的神经元模型构成，这些神经元模型之间通过加权互连。</li><li>人工神经网络具有并行结构和并行处理机制，人工神经网络不仅在结构上是并行的，在处理顺序上也是并行的。</li><li>人工神经网络可以通过调节神经元之间的连接权重来进行学习</li></ul><h4 id="2-梯度下降算法"><a href="#2-梯度下降算法" class="headerlink" title="2.梯度下降算法"></a>2.梯度下降算法</h4><p><a href="https://zhuanlan.zhihu.com/p/68468520">原文链接</a><br>寻找损失函数的最低点，就像我们在山谷里行走，希望找到山谷里最低的地方。那么如何寻找损失函数的最低点呢？在这里，我们使用了微积分里导数，通过求出函数导数的值，从而找到函数下降的方向或者是最低点（极值点）。</p><p>损失函数里一般有两种参数，一种是控制输入信号量的权重(Weight, 简称 $w$ ），另一种是调整函数与真实值距离的偏差（Bias，简称 $b$ ）。我们所要做的工作，就是通过梯度下降方法，不断地调整权重 $w$ 和偏差$b$，使得损失函数的值变得越来越小。</p><p>假设某个损失函数里，模型损失值 $L$与权重 $w$ 有下图这样的关系。实际模型里，可能会有多个权重 $w$ ，这里为了简单起见，举只有一个权重 $w$ 的例子。权重$w$ 目前的位置是在A点。此时如果求出A点的梯度 $\frac{dL}{dw}$ ，便可以知道如果我们向右移动，可以使损失函数的值变得更小。<br><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/5.jpg" alt="5"><br>公式太多了，好好看</p><h4 id="3-多层神经网络使用什么算法进行训练？"><a href="#3-多层神经网络使用什么算法进行训练？" class="headerlink" title="3.多层神经网络使用什么算法进行训练？"></a>3.多层神经网络使用什么算法进行训练？</h4><p><a href="https://www.jianshu.com/p/cc440fb27874">逆误差传播算法</a><br><pre class="line-numbers language-python" data-language="python"><code class="language-python">算法过程：<span class="token number">1</span>：在（<span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span>）区间内随机初始化网络中的所有连接权值和阈值<span class="token number">2</span>：repeat<span class="token number">3</span>：    <span class="token keyword">for</span> <span class="token builtin">all</span> <span class="token punctuation">(</span>xk<span class="token punctuation">,</span>yk<span class="token punctuation">)</span> ∈ D do<span class="token number">4</span>：        根据当前参数和公式计算输出<span class="token number">5</span>：        计算输出层神经元的梯度项gj<span class="token number">6</span>：        计算隐藏层神经元的梯度项eh<span class="token number">7</span>：        计算和更新连接权值ωhj、νih和阈值θj γh<span class="token number">8</span>：    end <span class="token keyword">for</span><span class="token number">9</span>：until 达到停止训练的条件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h2 id="贝叶斯学习"><a href="#贝叶斯学习" class="headerlink" title="贝叶斯学习"></a>贝叶斯学习</h2><h4 id="1-根据贝叶斯理论，如何计算一个假设-h-成立的后验概率"><a href="#1-根据贝叶斯理论，如何计算一个假设-h-成立的后验概率" class="headerlink" title="1.根据贝叶斯理论，如何计算一个假设$h$成立的后验概率"></a>1.根据贝叶斯理论，如何计算一个假设$h$成立的后验概率</h4><p>先验概率（prior probability）：指根据以往经验和分析。在实验或采样前就可以得到的概率。<br>后验概率（posterior probability）：指某件事已经发生，想要计算这件事发生的原因是由某个因素引起的概率。<br>由贝叶斯定理：</p><script type="math/tex; mode=display">P(B|A)=\frac{P(A|B)P(B)}{P(A)}</script><h4 id="2-极大后验概率假设和极大似然假设有何区别"><a href="#2-极大后验概率假设和极大似然假设有何区别" class="headerlink" title="2.极大后验概率假设和极大似然假设有何区别"></a>2.极大后验概率假设和极大似然假设有何区别</h4><p>最大后验概率假设即求参数$\theta$，使后验概率$P(\theta|X)$最大，由上文所述，<script type="math/tex">P(\theta|X)=\frac{P(X|\theta)P(\theta)}{P(X)}</script>式中，$P(X)$已知，所以极大后验概率假设就是求取$P(X|\theta)P(\theta)$最大时参数$\theta$的值。<br>极大似然假设即求似然函数$P(X|\theta)$最大时参数$\theta$的值。<br>两种假设方法的不同之处在于极大后验概率假设在计算时考虑了先验概率参数$P(\theta)$，极大后验概率假设认为参数$\theta$的值是服从某种分布的，而极大似然假设认为参数$\theta$的值是一个定值。当参数$\theta$服从均匀分布时，可以认为这两种假设就是相同的。</p><h4 id="3-最小描述长度的基本思想"><a href="#3-最小描述长度的基本思想" class="headerlink" title="3.最小描述长度的基本思想"></a>3.最小描述长度的基本思想</h4><p>最小描述长度( MDL) 原理是 Rissane 在研究通用编码时提出的。其基本原理是对于一组给定的实例数据 D ， 如果要对其进行保存 ，为了节省存储空间， 一般采用某种模型对其进行编码压缩，然后再保存压缩后的数据。同时， 为了以后正确恢复这些实例数据，将所用的模型也保存起来。所以需要保存的数据长度( 比特数) 等于这些实例数据进行编码压缩后的长度加上保存模型所需的数据长度，将该数据长度称为总描述长度。最小描述长度( MDL) 原理就是要求选择总描述长度最小的模型。<br>如果将贝叶斯网络作为对实例数据进行压缩编码的模型， MDL原理就可以用于贝叶斯网络的学习。该度量被视为网络结构的描述长度和在给定结构下样本数据集的描述长度之和。一方面，用于描述网络结构的编码位随模型复杂度的增加而增加 ； 另一方面， 对数据集描述的编码位随模型复杂度的增加而下降。因此，贝叶斯网络的 MDL总是力求在模型精度和模型复杂度之间找到平衡。构建贝叶斯网络首先定义一个评分函数， 该评分函数描述了每个可能结构对观察到的数据拟合， 其目的就是发现评分最大的结构，这个过程连续进行到新模型的评分分数不再比老模型的高为止。</p><h4 id="4-贝叶斯最优分类器的基本思想"><a href="#4-贝叶斯最优分类器的基本思想" class="headerlink" title="4.贝叶斯最优分类器的基本思想"></a>4.贝叶斯最优分类器的基本思想</h4><p>贝叶斯决策论考虑在所有的相关概率已知的情况下，基于这些概率和误判损失来确定最优的类别标记。<br>假设有$N$种可能的类别标记，即$\mathcal{Y}=\left\lbrace c<em>1,c_2,…,c_N\right\rbrace$，$\lambda</em>{ij}$是将一个$c_i$错分为$c_j$产生的损失，则在样本$x$上产生的条件风险为：</p><script type="math/tex; mode=display">R(c_i|x)=\sum_{j=1}^{N}\lambda_{ij}P(c_j|x)</script><p>贝叶斯最优分类器的思想就是寻找一个判定准则$h:\mathcal{X}\mapsto\mathcal{Y}$，最小化总体风险：：</p><script type="math/tex; mode=display">R(h)=\mathbb{E}_x[R(h(x)|x)]</script><p>对于每个样本$x$,若分类器$h$能够最小化条件风险$R(h(x)|x)$，则总体风险$R(h)$也将被最小化。这样就产生了贝叶斯判定准则：为最小化总体风险，只需在每个样本上选取那个能使条件风险最小的类别标记，即：</p><script type="math/tex; mode=display">h^*(x)=\argmin_{c \in \mathcal{Y}}R(c|x)</script><p>此时，$h^*(x)$记为贝叶斯最优分类器。<br><img src="6.png" alt=""></p><h4 id="5-朴素贝叶斯分类算法"><a href="#5-朴素贝叶斯分类算法" class="headerlink" title="5.朴素贝叶斯分类算法"></a>5.朴素贝叶斯分类算法</h4><p>为了解决直接使用贝叶斯公式计算后验概率时，可能遇到的类条件概率难以计算问题朴素贝叶斯分类器采用了属性条件独立性假设：对已知类别，假设所有的属性都相互独立。此时后验概率将十分便于计算。</p><script type="math/tex; mode=display">P(c|x)=\frac{P(c)}{P(x)}\prod_{i=1}^{d}P(x_i|c)</script><p>式中:$d$为属性的个数，$x_i$为样本$x$在第$i$个属性上的取值。<br>此时，基于贝叶斯判定准则：</p><script type="math/tex; mode=display">h_{nb}(x)=\argmax_{c \in \mathcal{Y}}P(c)\prod^d_{i=1}P(x_i|c)</script><p>这就是朴素贝叶斯分类器的表达式。</p><h4 id="6-贝叶斯信念网络的预测和诊断"><a href="#6-贝叶斯信念网络的预测和诊断" class="headerlink" title="6.贝叶斯信念网络的预测和诊断"></a>6.贝叶斯信念网络的预测和诊断</h4><p>直接使用贝叶斯网定义的联合概率分布来精确计算后验概率<br>但是，当贝叶斯网结点很多且连接稠密时，后验概率就很难以进行精确计算。<br>应该引入Gibbs采样算法（但是ppt上没有说怎么对贝叶斯网进行gibbs采样，猜测应该不考）。<br>基本上就是使用全概率公式结合贝叶斯网给出的CPT来计算吧，还是比较简单的<br>ppt上的几道计算：<br><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/7.png" alt="7"><br><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/8.png" alt="8"><br><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/9.png" alt="9"><br><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/10.png" alt="10"><br><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/11.png" alt="11"></p><h2 id="基于实例的学习"><a href="#基于实例的学习" class="headerlink" title="基于实例的学习"></a>基于实例的学习</h2><h4 id="1-K近邻学习算法"><a href="#1-K近邻学习算法" class="headerlink" title="1.K近邻学习算法"></a>1.K近邻学习算法</h4><p> k近邻算法是数据挖掘和机器学习中十分常用的一种学习算法，是一种无参数的懒惰学习算法，在学习阶段仅仅是将数据保存起来，训练时间的开销为0，待收到样本后再进行处理。这种算法的基本思想是找到距离样本最近的k个点，基于这k个邻居的标签进行投票。票数最多的标签即为预测结果。</p><ul><li>KNN的优点：<ul><li>knn算法原理十分简单，易于解释结果。</li><li>懒惰学习，在训练过程中不对基础的数据模式做出假设，训练过程的复杂度为O(n)。</li><li>既可用于分类，也可用于回归；既可用于数值型数据，也可用于离散性数据。</li><li>对异常值不敏感。</li></ul></li><li>KNN的缺点：<ul><li>计算复杂性高，空间复杂性高。</li><li>当样本不平衡时，有的类别的样本数量很多，其他样本的数量很少，可能会导致分类出错。</li><li>计算量较大，需要计算每个样本到所有点的距离，再对距离排序才能求得k个近邻点。<h4 id="2-为什么在使用K近邻算法时要对距离进行归一化"><a href="#2-为什么在使用K近邻算法时要对距离进行归一化" class="headerlink" title="2.为什么在使用K近邻算法时要对距离进行归一化"></a>2.为什么在使用K近邻算法时要对距离进行归一化</h4>当样本有多个特征值时，其中某个特征数量级比较大，其他特征较小时，分类结果会被数量级比较大的特征值所主导，而弱化了其他特征的影响，这是各个特征值的量纲不同所致，需要将数据归一化处理<h4 id="3-局部加权线性回归"><a href="#3-局部加权线性回归" class="headerlink" title="3.局部加权线性回归"></a>3.局部加权线性回归</h4>线性回归的一个问题是有可能出现欠拟合，因为它求的是具有最小均方误差的无偏估计，显然模型欠拟合将无法做出很好的回归预测，所以有些方法允许在估计中引入一些偏差，从而降低预测的均方误差。局部线性加权的思想是对待预测点附近的每个点赋予一个权重，然后在带权的样本上基于最小均方误差来进行回归.<br>对于一个数据点，与其靠近的点，权重大，与其相距较远的点，权重小，从而优化问题会有所偏倚，靠近的点对该数据点的回归拟合起较大作用，而相距较远的点由于权数很小，造成的影响基本可以忽略不计，这样就等同于每个点的回归都是基于与其相距较近的点为基础，而忽略了较远的点，这也就是局部加权线性回归局部的由来，因为它着重考虑目标点局部的数据点为回归基础.<br>局部加权回归在选择到合适的k时，回归拟合的效果比普通线性回归好很多，但是有一点需要注意，就是局部线性加权回归的计算量很大，因为对于每个数据点，都需要计算与其他数据点的距离矩阵θ，即遍历整个数据集，因此我们还需要探索更加高效简介的算法，减小时间空间开销.<br><a href="https://blog.csdn.net/BIT_666/article/details/80420946">原文链接</a><h4 id="4-懒惰学习和积极学习的区别"><a href="#4-懒惰学习和积极学习的区别" class="headerlink" title="4.懒惰学习和积极学习的区别"></a>4.懒惰学习和积极学习的区别</h4></li></ul></li><li><p>积极学习：这种学习方法是指在利用算法进行判断之前，首先通过训练集的数据训练得到一个目标函数，在需要进行判断是利用已经训练好的函数进行决策，这种方法需要在开始的时候进行一些工作，在后期使用时十分方便。</p></li><li><p>消极学习：这种学习方法在最开始的时候不会根据已有的样本数据构建目标函数，只是简单的把训练好的样本储存好，后期对新加入的样本进行判断时，才分析新进入样本与已存在样本之间的关系。据此确定新进入样本的目标函数值。</p><h2 id="集成学习"><a href="#集成学习" class="headerlink" title="集成学习"></a>集成学习</h2><h4 id="1-集成学习的定义"><a href="#1-集成学习的定义" class="headerlink" title="1.集成学习的定义"></a>1.集成学习的定义</h4><p>集成学习就是说将多个 “单个学习器（Individual Learner）”用某种策略来结合起来，组成一个“学习委员会（committee）”，使得整体的泛化性能得到大大提高。</p><h4 id="2-集成学习的两个主要问题"><a href="#2-集成学习的两个主要问题" class="headerlink" title="2.集成学习的两个主要问题"></a>2.集成学习的两个主要问题</h4><p>准确性和多样性。<br>准确性：个体学习器不能太差，要有一定的准确度（即不能有一个太短的短板）<br>多样性：个体学习器之间的输出要具有差异性（各有所长的意思，不能所有的学习器的优点都是一样的）</p><h4 id="3-bagging基本思想和伪代码"><a href="#3-bagging基本思想和伪代码" class="headerlink" title="3.bagging基本思想和伪代码"></a>3.bagging基本思想和伪代码</h4><p>bagging方法：bagging方法是并行式集成学习方法中最著名的代表。给定包含$m$个样本的数据集，我们先随机的从中取出一个样本放入采样集中，再把该样本放回初始数据集。使得下次采样时该样本一九有可能被选中。这样，经过$m$次操作，我们就得到了含$m$个样本的采样集，初始训练集中有的样本在采样集中多次出现，有的则从未出现。基于每个采样集训练出一个基学习器，再将这些学习器进行结合。</p></li></ul><p><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/1.jpg" alt="1"></p><h4 id="4-boosting基本思想和伪代码"><a href="#4-boosting基本思想和伪代码" class="headerlink" title="4.boosting基本思想和伪代码"></a>4.boosting基本思想和伪代码</h4><p>boosting方法：boosting方法是一种具有代表性的序列化方法。可以将弱学习器提升为强学习器。先从初始训练集中训练出一个基学习器，再根据基学习器的表现对训练样本分布进行调整，使得先前基学习器做错的样本在后续训练的过程中受到更多的关注，基于调整后的样本再训练下一个基学习器；如此重复，直到基学习器的数量达到事先指定值$T$，最终将这$T$个基学习器进行加权结合。（adaboost算法）<br><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/2.jpg" alt="2"></p><h4 id="5-为何集成学习有效"><a href="#5-为何集成学习有效" class="headerlink" title="5.为何集成学习有效"></a>5.为何集成学习有效</h4><p>当集成学习中集成的个体分类器数目足够多时，集成的错误率将指数级下降，趋向于0。<br>以简单的二分类问题为例：<br>考虑简单的二分类问题$y\in\left{-1,+1\right}$和真实函数$f$，假定基分类器的错误率为$\epsilon$,则对于每个基分类器$h_i$都有：</p><script type="math/tex; mode=display">P(h_i(x)\neq f(x))=\epsilon</script><p>集成学习通过简单投票法结合$T$个基分类器，若有超过半数的基分类器正确，则集成分类器就正确：</p><script type="math/tex; mode=display">H(x)=sign(\sum_{i=1}^{T}h_i(x))</script><p>假设基分类器的错误率之间相互独立，由Hoeffding不等式可知，集成分类器的错误率：</p><script type="math/tex; mode=display">\begin{align*}P(H(x)\neq f(x))&=\sum_{k=0}^{[T/2]}\begin{pmatrix} T\\ k \end{pmatrix}(1-\epsilon)^{k}\epsilon^{1-k}\\&\leq exp(-\frac{1}{2}T(1-2\epsilon)^2)\end{align*}</script><p>由上述公式可得，当集成学习中基分类器的数目$T$增大时，集成学习的错误率将指数级下降。因此，集成学习比单个模型更加有效。</p><h2 id="分类技术"><a href="#分类技术" class="headerlink" title="分类技术"></a>分类技术</h2><h4 id="1-基于规则的分类器有何优点，需要解决什么问题"><a href="#1-基于规则的分类器有何优点，需要解决什么问题" class="headerlink" title="1.基于规则的分类器有何优点，需要解决什么问题"></a>1.基于规则的分类器有何优点，需要解决什么问题</h4><p>规则集的表达能力等价于决策树<br>基于规则的分类器通常用于产生更易于解释的描述性模型，而模型的性能却可与决策树分类器相媲美。<br>很多基于规则的分类器（如RIPPER）采用的基于类的规则定序方法非常适用于处理类分布不平衡的数据集</p><p>在规则的增长过程中，需要一种评估度量来确定应该增加或者删除哪个规则。准确率就是一种很常用的选择。但是，在使用准确率作为评估度量时，算法可能会受到一些覆盖率较低，但是准确率十分高的规则的欺骗。在这时，我们常常使用统计检验剪除覆盖率较低的规则，或者转而采用一些考虑规则覆盖率的评估度量。</p><h4 id="2-序列覆盖算法"><a href="#2-序列覆盖算法" class="headerlink" title="2.序列覆盖算法"></a>2.序列覆盖算法</h4><p>算法开始时决策表R为空，接下来用函数提取类的覆盖当前训练记录集的最佳规则。在提取规则时，类的所有训练记录被看做是正例，而其他类的训练记录则被当成反例。如果一个规则覆盖大多数正例，没有或者仅覆盖极少数反例，那么该规则是可取的。一旦找到这样的规则，就删掉它所覆盖的训练记录，并把新规则追加到决策表R的尾部。重复这个过程直到满足终止条件。<br><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/12.png" alt="12"><br><a href="https://blog.csdn.net/TOMOCAT/article/details/82560908">原文链接</a></p><h4 id="3-支持向量机的基本原理"><a href="#3-支持向量机的基本原理" class="headerlink" title="3.支持向量机的基本原理"></a>3.支持向量机的基本原理</h4><p>SVM的一般做法是：将所有待分类的点映射到“高维空间”，然后在高维空间中找到一个能将这些点分开的“超平面”，这在理论上是被完全证明了是成立的，而且在实际计算中也是可行的。</p><h2 id="聚类分析"><a href="#聚类分析" class="headerlink" title="聚类分析"></a>聚类分析</h2><h4 id="1-聚类的定义"><a href="#1-聚类的定义" class="headerlink" title="1.聚类的定义"></a>1.聚类的定义</h4><p>无监督学习中，训练样本的信息是未知的，目标是通过对无标记训练样本的学习来揭示数据的内在性质及规律，为进一步的数据分析提供基础。应用最广也是研究最多的是——-聚类</p><p>聚类试图将数据集中的样本划分为若干个通常是不相交的子集，每个子集称为一个“簇”。聚类过程只能形成簇结构，而簇对应的概念语义需要由使用者来把握和命名。聚类既可以作为一个单独过程用来寻找数据内部的分布结构，也可以作为分类等其他学习任务的前驱过程。（西瓜书）</p><h4 id="2-聚类的类型"><a href="#2-聚类的类型" class="headerlink" title="2.聚类的类型"></a>2.聚类的类型</h4><ul><li>基于划分的聚类/基于层次的聚类</li><li>互斥的/重叠的/模糊的</li><li>完全的/部分的<br><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/13.png" alt="13"><br><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/14.png" alt="14"></li></ul><h4 id="3-簇的类型"><a href="#3-簇的类型" class="headerlink" title="3.簇的类型"></a>3.簇的类型</h4><p><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/15.png" alt="15"></p><h4 id="4-层次聚类的两种主要类型"><a href="#4-层次聚类的两种主要类型" class="headerlink" title="4.层次聚类的两种主要类型"></a>4.层次聚类的两种主要类型</h4><p><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/16.png" alt="16"></p><h4 id="5-计算簇间相似性的单链和全链方法"><a href="#5-计算簇间相似性的单链和全链方法" class="headerlink" title="5.计算簇间相似性的单链和全链方法"></a>5.计算簇间相似性的单链和全链方法</h4><p>单链方法：该方法中两个簇的邻近度定义为两个不同簇中任意两点之间的最短距离。<br>全链方法：该方法中两个簇的邻近度定义为两个不同簇中任意两点之间的最长距离。</p><h4 id="6-K均值和K中心点算法"><a href="#6-K均值和K中心点算法" class="headerlink" title="6.K均值和K中心点算法"></a>6.K均值和K中心点算法</h4><ul><li>K均值算法：<br>给定样本集$D=\left{x_1,x_2,…x_m\right}$,k均值算法即针对聚类所得的簇$\mathcal{C}=\left{C_1,C_2,…,C_k\right}$划分最小化平方误差<script type="math/tex; mode=display">E=\sum^k_{i=1}\sum_{x \in C_i}||x-\mu_i||^2_2</script>最小化上式是NP难的，所以采用迭代方法进行求解。其步骤是，预将数据分为K组，则随机选取K个对象作为初始的聚类中心，然后计算每个对象与各个种子聚类中心之间的距离，把每个对象分配给距离它最近的聚类中心。聚类中心以及分配给它们的对象就代表一个聚类。每分配一个样本，聚类的聚类中心会根据聚类中现有的对象被重新计算。这个过程将不断重复直到满足某个终止条件。终止条件可以是没有（或最小数目）对象被重新分配给不同的聚类，没有（或最小数目）聚类中心再发生变化，误差平方和局部最小。</li><li>K中心点算法：<br>K-中心点算法也是一种常用的聚类算法，K-中心点聚类的基本思想和K-Means的思想相同，实质上是对K-means算法的优化和改进。在K-means中，异常数据对其的算法过程会有较大的影响。在K-means算法执行过程中，可以通过随机的方式选择初始质心，也只有初始时通过随机方式产生的质心才是实际需要聚簇集合的中心点，而后面通过不断迭代产生的新的质心很可能并不是在聚簇中的点。如果某些异常点距离质心相对较大时，很可能导致重新计算得到的质心偏离了聚簇的真实中心。<br>K-中心聚类算法计算的是某点到其它所有点的距离之和最小的点，通过距离之和最短的计算方式可以减少某些孤立数据对聚类过程的影响。从而使得最终效果更接近真实划分，但是由于上述过程的计算量会相对大于K-means，大约增加O（n）的计算量，因此一般情况下K-中心算法更加适合小规模数据运算。</li></ul><h4 id="8-聚类评估"><a href="#8-聚类评估" class="headerlink" title="8.聚类评估"></a>8.聚类评估</h4><ul><li>相似性矩阵</li><li>SSE</li><li>Cohesion &amp; Separation</li><li>SC</li><li>Entropy Purity<br><a href="https://www.biaodianfu.com/cluster-score.html">链接</a><h2 id="关联分析"><a href="#关联分析" class="headerlink" title="关联分析"></a>关联分析</h2><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h4></li><li>项集： 一个或几个项目的集合</li><li>频繁项集：支持度大于或等于最小阈值的项集</li><li>支持度：项集出现的频率</li><li>置信度：置信度表示在先决条件X发生的情况下，由关联规则”X→Y“推出Y的概率。表示在发生X的项集中，同时会发生Y的可能性，即X和Y同时发生的个数占仅仅X发生个数的比例</li><li>最大频繁项集：如果频繁项集L的所有超集都是非频繁项集，那么称L为最大频繁项集或称最大频繁模式</li><li>闭频繁项集：所谓闭项集，就是指一个项集X，它的直接超集（最小的严格超集）的支持度计数都不等于它本身的支持度计数。如果闭项集同时是频繁的，也就是它的支持度大于等于最小支持度阈值，那它就称为闭频繁项集。<h4 id="2-apriori算法"><a href="#2-apriori算法" class="headerlink" title="2.apriori算法"></a>2.apriori算法</h4>Apriori是一种常用的数据关联规则挖掘方法，它可以用来找出数据集中频繁出现的数据集合。找出这样的一些频繁集合有利于决策，例如通过找出超市购物车数据的频繁项集，可以更好地设计货架的摆放。需要注意的是它是一种逐层迭代的方法，先找出频繁项集L1，再利用L1找出频繁2项集，以此类推。<br><a href="https://zhuanlan.zhihu.com/p/341882260">原文链接</a><h4 id="3-FP增长算法"><a href="#3-FP增长算法" class="headerlink" title="3.FP增长算法"></a>3.FP增长算法</h4><a href="https://blog.csdn.net/qq_23100787/article/details/51790637">原文链接</a><h4 id="4-关联模式评估"><a href="#4-关联模式评估" class="headerlink" title="4.关联模式评估"></a>4.关联模式评估</h4></li><li>使用interesting measures对派生模式进行修剪和排名</li><li>使用支持度和置信度对关联模式进行评估<br><img src="17.png" alt=""><h2 id="维度约减"><a href="#维度约减" class="headerlink" title="维度约减"></a>维度约减</h2><h4 id="1-过滤法和包裹法"><a href="#1-过滤法和包裹法" class="headerlink" title="1.过滤法和包裹法"></a>1.过滤法和包裹法</h4>过滤法：过滤法就是按照发散性或者相关性对各个特征进行评分，设定阈值或者选择阈值的个数，完成特征选择。根据选择的评估标准不同，有方差法，相关系数法，互信息法。优点：不依赖于任何机器学习方法，且不需要交叉验证，计算效率比较高。缺点：没有考虑机器学习算法的特点</li></ul><p>包裹法：包裹法是选择一种算法，然后再根据算法效果来选择特征集合。就是通过不断的启发式方法来搜索特征，主要分为如下两类。方法一：选择一些特征，逐步增加特征保证算法模型精度是否达标。方法二：删除一些特征，然后慢慢在保持算法精度的条件下，缩减特征。缺点1.需要对每一组特征子集训练一个模型，计算量很大2.样本不够充分的情况下容易过拟合3.特征变量较多时计算复杂度太高</p><h4 id="2-五种不同的特征搜索方法，基本思想和伪代码"><a href="#2-五种不同的特征搜索方法，基本思想和伪代码" class="headerlink" title="2.五种不同的特征搜索方法，基本思想和伪代码"></a>2.五种不同的特征搜索方法，基本思想和伪代码</h4><p>前向搜索，后向搜索，浮动搜索，双向搜索，增L去R搜索<br><a href="https://blog.csdn.net/zhangweijiqn/article/details/9109995">原文</a></p><h4 id="3-维度约减效果评估"><a href="#3-维度约减效果评估" class="headerlink" title="3.维度约减效果评估"></a>3.维度约减效果评估</h4><p>真的讲了吗？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？</p>]]></content>
      
      
      <categories>
          
          <category> 日日谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> normaldays </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次平平无奇的作业/练习markdown语法/决策树算法和模型评估标准</title>
      <link href="/2021/10/30/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%B9%B3%E5%B9%B3%E6%97%A0%E5%A5%87%E7%9A%84%E4%BD%9C%E4%B8%9A/"/>
      <url>/2021/10/30/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%B9%B3%E5%B9%B3%E6%97%A0%E5%A5%87%E7%9A%84%E4%BD%9C%E4%B8%9A/</url>
      
        <content type="html"><![CDATA[<p>记一次平平无奇的数据挖掘课的作业。<br>顺便也是练习使用markdown语法。<br>作业题：<br><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/10_30_21_1_1.jpg" alt="10_30_21_1_1"><br><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/10_30_21_1_2.jpg" alt="10_30_21_1_2"><br><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/10_30_21_1_3.jpg" alt="10_30_21_1_3"><br><img src="https://tuchuang-1307891532.cos.ap-nanjing.myqcloud.com/images/10_30_21_1_4.jpg" alt="10_30_21_1_4"></p><p>作业：</p><h1 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h1><h3 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h3><p>决策树是一种很常见的机器学习方法。常常用在样本的对象和属性值一一对应时；目标函数有离散的输出值；可能需要析取假设；训练数据集中可能有噪声或者样本中含有缺失属性值的情况下。</p><h3 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h3><p>剪枝处理是决策树学习算法解决过拟合的主要手段。决策树剪枝的基本策略可分为预剪枝和后剪枝。<br>预剪枝是指在决策树生成的过程中，对每个结点在划分前进行估计，若当前节点的划分不能带来决策树泛化性能的提升，则停止划分并将当前节点标记为叶结点。<br>后剪枝则是先从训练集生成一颗完整的决策树，然后自底向上的对非叶结点进行考察。若当前结点对应的子树替换为叶结点能带来决策树泛化性能的提升，则将该子节点替换为叶结点。</p><h3 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h3><p>缺失值将从三个方向给决策树的构建带来影响：</p><ul><li>在训练样本属性缺失的情况下，无法进行划分属性的选择</li><li>给定划分属性，若样本在该属性上的值是缺失的，导致无法对此样本进行划分</li><li>测试样本中属性有缺失值，可能导致测试出错<h3 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4></li><li>决策树学习为概念学习和其他离散值函数的学习提供了一种可供实践的方法。</li><li>具有可解释性，能够在相当短的时间内对大型的数据源做出可行且效果良好的结果，决策树分类的效率高。只需要进行一次构建，即可反复使用。</li><li>易于通过静态测试来对模型进行评测，可以测定模型可信度；如果给定一个观察的模型，那么根据所产生的决策树很容易推出相应的逻辑表达式。</li></ul><h4 id="分类过程中可能出现的问题"><a href="#分类过程中可能出现的问题" class="headerlink" title="分类过程中可能出现的问题"></a>分类过程中可能出现的问题</h4><ul><li>在决策树分类的过程中，很经常出现的一个问题就是过拟合问题。在决策树构建的过程中，为了尽可能正确的分类学习样本，常常会不断地对结点进行划分，导致决策树的分支过多，可能会导致错误的将样本集的一些特征当作所有数据都具有的特征从而出现过拟合问题。<h3 id="第五题"><a href="#第五题" class="headerlink" title="第五题"></a>第五题</h3></li></ul><p>集合中共含有十五个样本，其中6个拒绝，9个接受,计算集合的信息熵：</p><script type="math/tex; mode=display">Ent=-\sum_{k=1}^{y}p_klog_2p_k=-\frac{6}{15}log_2\frac{6}{15}-\frac{9}{15}log_2\frac{9}{15}=0.97</script><p>以属性“年龄”对集合进行划分，得到三个子集：$D^1(年龄=青年)，D^2(年龄=中年)，D^3(年龄=老年)$，分别计算三个子集的信息熵：</p><script type="math/tex; mode=display">Ent(D^1)=-\frac{3}{5}log_2\frac{3}{5}-\frac{2}{5}log_2\frac{2}{5}=0.97</script><script type="math/tex; mode=display">Ent(D^2)=-\frac{3}{5}log_2\frac{3}{5}-\frac{2}{5}log_2\frac{2}{5}=0.97</script><script type="math/tex; mode=display">Ent(D^3)=-\frac{4}{5}log_2\frac{4}{5}-\frac{1}{5}log_2\frac{1}{5}=0.721</script><p>由信息增益的计算公式，计算属性年龄对样本集$D$进行划分的信息增益：</p><script type="math/tex; mode=display">\begin{aligned}Gain(D,年龄)&=Ent(D)-\sum_{v=1}^{V}\frac{\lvert D^v \rvert}{\lvert D \rvert}Ent(D^v)\\&=0.97-(\frac{1}{3}\times0.97+\frac{1}{3}\times0.97+\frac{1}{3}\times0.721)\\&=0.089\end{aligned}</script><p>相似的，分别求取以工作情况划分样本集时，以房产情况划分样本集时，以信贷情况划分样本集时的信息增益：</p><script type="math/tex; mode=display">Gain(D,工作情况)=0.97-\frac{10}{15}\times0.97=0.33</script><script type="math/tex; mode=display">Gain(D,房产情况)=0.97-\frac{9}{15}\times0.917=0.419</script><script type="math/tex; mode=display">Gain(D,信贷情况)=0.97-\frac{5}{15}\times0.721-\frac{6}{15}\times0.917=0.362</script><p>比较可得，房产情况为最优特征。</p><h3 id="第六题"><a href="#第六题" class="headerlink" title="第六题"></a>第六题</h3><p>由上文第五题的求解，确定使用房产情况为根结点；<br><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">graph</span> TB A<span class="token text string">[房产情况]</span> B<span class="token text string">[有]</span> C<span class="token text string">[无]</span> D<span class="token text string">[同意]</span> E<span class="token text string">[其他情况]</span> A<span class="token arrow operator">--></span>B A<span class="token arrow operator">--></span>C B<span class="token arrow operator">--></span>D C<span class="token arrow operator">--></span>E<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>此时，有房产的样本已经到达叶节点；将无房产的样本单独划分为一个集合，共有九个样本，首先计算该子样本集的信息熵：</p><script type="math/tex; mode=display">Ent(D_1)=-\sum_{k=1}^{\lvert \gamma \rvert}p_klog_{2}p_k=-\frac{6}{9}log_2\frac{6}{9}-\frac{3}{9}log_2\frac{3}{9}=0.917</script><p>分别计算其他属性对于子样本集的信息增益：</p><script type="math/tex; mode=display">Gain(D_1|年龄)=Ent(D_1)-\sum_{v=1}^{V}\frac{\lvert D^v_1 \rvert}{\lvert D_1 \rvert}Ent(D^v_1)=0.917-0.36-0.305=0.252\\Gain(D_1|工作)=Ent(D_1)-\sum_{v=1}^{V}\frac{\lvert D^v_1 \rvert}{\lvert D_1 \rvert}Ent(D^v_1)=0.917-0=0.917\\Gain(D_1|信贷)=Ent(D_1)-\sum_{v=1}^{V}\frac{\lvert D^v_1 \rvert}{\lvert D_1 \rvert}Ent(D^v_1)=0.917-\frac{4}{9}=0.472</script><p>此时：工作情况为最优特征，决策树构建为；<br><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">graph</span> TB A<span class="token text string">[房产情况]</span> B<span class="token text string">[有]</span> C<span class="token text string">[无]</span> D<span class="token text string">[同意]</span> E<span class="token text string">[工作情况]</span> F<span class="token text string">[有工作]</span><span class="token arrow operator">--></span>FF<span class="token text string">[同意]</span> G<span class="token text string">[无工作]</span><span class="token arrow operator">--></span>GG<span class="token text string">[拒绝]</span> A<span class="token arrow operator">--></span>B A<span class="token arrow operator">--></span>C B<span class="token arrow operator">--></span>D C<span class="token arrow operator">--></span>E E<span class="token arrow operator">--></span>F E<span class="token arrow operator">--></span>G<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="第七题"><a href="#第七题" class="headerlink" title="第七题"></a>第七题</h3><p>python源代码：<br><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#ID3算法</span><span class="token keyword">import</span> math<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> matplotlib<span class="token punctuation">.</span>pylab <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> treePlotter <span class="token keyword">import</span> createPlot<span class="token keyword">def</span> <span class="token function">calcShannonent</span><span class="token punctuation">(</span>dataset<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#计算信息熵</span>    numEntries<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>dataset<span class="token punctuation">)</span>    labelCounts<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> featVec <span class="token keyword">in</span> dataset<span class="token punctuation">:</span>        currentLabel <span class="token operator">=</span> featVec<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token comment">#判断这个标签在字典中是否存在，不存在就初始化</span>        <span class="token keyword">if</span> currentLabel <span class="token keyword">not</span> <span class="token keyword">in</span> labelCounts<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            labelCounts<span class="token punctuation">[</span>currentLabel<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment">#统计不同类别的数量</span>        labelCounts<span class="token punctuation">[</span>currentLabel<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment">#初始化熵</span>    shannonent <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token comment">#计算熵</span>    <span class="token keyword">for</span> key <span class="token keyword">in</span> labelCounts<span class="token punctuation">:</span>        prob <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>labelCounts<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span>numEntries        shannonent <span class="token operator">-=</span> prob <span class="token operator">*</span> math<span class="token punctuation">.</span>log<span class="token punctuation">(</span>prob<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> shannonent<span class="token keyword">def</span> <span class="token function">SubDataset</span><span class="token punctuation">(</span>dataset<span class="token punctuation">,</span>index<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#从总的数据集中选取出关心的数据组成新的数据集</span>    sub_dataset <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> example <span class="token keyword">in</span> dataset<span class="token punctuation">:</span>        current_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> example<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> value<span class="token punctuation">:</span>            current_list <span class="token operator">=</span> example<span class="token punctuation">[</span><span class="token punctuation">:</span>index<span class="token punctuation">]</span>            current_list<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>example<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            sub_dataset<span class="token punctuation">.</span>append<span class="token punctuation">(</span>current_list<span class="token punctuation">)</span>    <span class="token keyword">return</span> sub_dataset<span class="token keyword">def</span> <span class="token function">ChooseBestFeature</span><span class="token punctuation">(</span>dataset<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#选择最优特征</span>    num_features<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>dataset<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>    current_Ent<span class="token operator">=</span>calcShannonent<span class="token punctuation">(</span>dataset<span class="token punctuation">)</span>    bestFeatureGain<span class="token operator">=</span><span class="token number">0.0</span>    bestFeatureIndex<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num_features<span class="token punctuation">)</span><span class="token punctuation">:</span>        values_features<span class="token operator">=</span><span class="token punctuation">[</span>example<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> example <span class="token keyword">in</span> dataset<span class="token punctuation">]</span>        unique_value<span class="token operator">=</span><span class="token builtin">set</span><span class="token punctuation">(</span>values_features<span class="token punctuation">)</span>        new_ent<span class="token operator">=</span><span class="token number">0.0</span>        Gain<span class="token operator">=</span><span class="token number">0.0</span>        <span class="token keyword">for</span> value <span class="token keyword">in</span> unique_value<span class="token punctuation">:</span>            sub_dataset<span class="token operator">=</span>SubDataset<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span>i<span class="token punctuation">,</span>value<span class="token punctuation">)</span>            p<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>sub_dataset<span class="token punctuation">)</span><span class="token operator">/</span><span class="token builtin">len</span><span class="token punctuation">(</span>dataset<span class="token punctuation">)</span>            new_ent <span class="token operator">+=</span>p<span class="token operator">*</span>calcShannonent<span class="token punctuation">(</span>sub_dataset<span class="token punctuation">)</span>            Gain<span class="token operator">=</span>calcShannonent<span class="token punctuation">(</span>dataset<span class="token punctuation">)</span><span class="token operator">-</span>new_ent        <span class="token keyword">if</span><span class="token punctuation">(</span>Gain<span class="token operator">></span>bestFeatureGain<span class="token punctuation">)</span><span class="token punctuation">:</span>            bestFeatureGain<span class="token operator">=</span>Gain            bestFeatureIndex<span class="token operator">=</span>i    <span class="token keyword">return</span> bestFeatureIndex       <span class="token keyword">return</span> <span class="token keyword">def</span> <span class="token function">TreeGenerate</span><span class="token punctuation">(</span>dataset<span class="token punctuation">,</span>feature<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#通过递归调用创建决策树</span>    label_list<span class="token operator">=</span><span class="token punctuation">[</span>example<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> example <span class="token keyword">in</span> dataset<span class="token punctuation">]</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>label_list<span class="token punctuation">.</span>count<span class="token punctuation">(</span>label_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token builtin">len</span><span class="token punctuation">(</span>label_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#设置递归结束条件，类别中所有的标签都相同时，递归结束，返回一个叶节点</span>        <span class="token keyword">return</span> label_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        best_index<span class="token operator">=</span>ChooseBestFeature<span class="token punctuation">(</span>dataset<span class="token punctuation">)</span>    best_feature<span class="token operator">=</span>feature<span class="token punctuation">[</span>best_index<span class="token punctuation">]</span>    decisionTree<span class="token operator">=</span><span class="token punctuation">&#123;</span>best_feature<span class="token punctuation">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">del</span><span class="token punctuation">(</span>feature<span class="token punctuation">[</span>best_index<span class="token punctuation">]</span><span class="token punctuation">)</span>    values_best_feature<span class="token operator">=</span><span class="token punctuation">[</span>example<span class="token punctuation">[</span>best_index<span class="token punctuation">]</span> <span class="token keyword">for</span> example <span class="token keyword">in</span> dataset<span class="token punctuation">]</span>    dict_value<span class="token operator">=</span><span class="token builtin">set</span><span class="token punctuation">(</span>values_best_feature<span class="token punctuation">)</span>    <span class="token keyword">for</span> value <span class="token keyword">in</span> dict_value<span class="token punctuation">:</span>        new_feature<span class="token operator">=</span>feature        decisionTree<span class="token punctuation">[</span>best_feature<span class="token punctuation">]</span><span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token operator">=</span>TreeGenerate<span class="token punctuation">(</span>SubDataset<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span>best_index<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span>new_feature<span class="token punctuation">)</span><span class="token comment">#递归调用自身不断生成子树</span>        <span class="token keyword">return</span> decisionTree<span class="token keyword">def</span> <span class="token function">GenerateDataset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     dataset <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'青年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'一般般'</span><span class="token punctuation">,</span> <span class="token string">'拒绝'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'青年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'好'</span><span class="token punctuation">,</span> <span class="token string">'拒绝'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'青年'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'好'</span><span class="token punctuation">,</span> <span class="token string">'同意'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'青年'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'一般般'</span><span class="token punctuation">,</span> <span class="token string">'同意'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'青年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'一般般'</span><span class="token punctuation">,</span> <span class="token string">'拒绝'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'中年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'一般般'</span><span class="token punctuation">,</span> <span class="token string">'拒绝'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'中年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'好'</span><span class="token punctuation">,</span> <span class="token string">'拒绝'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'中年'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'好'</span><span class="token punctuation">,</span> <span class="token string">'同意'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'中年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'非常好'</span><span class="token punctuation">,</span> <span class="token string">'同意'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'中年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'非常好'</span><span class="token punctuation">,</span> <span class="token string">'同意'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'老年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'非常好'</span><span class="token punctuation">,</span> <span class="token string">'同意'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'老年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'好'</span><span class="token punctuation">,</span> <span class="token string">'同意'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'老年'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'好'</span><span class="token punctuation">,</span> <span class="token string">'同意'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'老年'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'非常好'</span><span class="token punctuation">,</span> <span class="token string">'同意'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'老年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'一般般'</span><span class="token punctuation">,</span> <span class="token string">'拒绝'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    features <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'年龄'</span><span class="token punctuation">,</span> <span class="token string">'有工作'</span><span class="token punctuation">,</span> <span class="token string">'有房子'</span><span class="token punctuation">,</span> <span class="token string">'信贷情况'</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> dataset<span class="token punctuation">,</span> features<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    dataset<span class="token punctuation">,</span>feature<span class="token operator">=</span>GenerateDataset<span class="token punctuation">(</span><span class="token punctuation">)</span>    decision_tree<span class="token operator">=</span>TreeGenerate<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span>feature<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>decision_tree<span class="token punctuation">)</span>    <span class="token comment"># 定义文本框和箭头格式</span>    decisionNode <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>boxstyle<span class="token operator">=</span><span class="token string">"round4"</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'#3366FF'</span><span class="token punctuation">)</span>  <span class="token comment">#定义判断结点形态</span>    leafNode <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>boxstyle<span class="token operator">=</span><span class="token string">"circle"</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'#FF6633'</span><span class="token punctuation">)</span>  <span class="token comment">#定义叶结点形态</span>    arrow_args <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>arrowstyle<span class="token operator">=</span><span class="token string">"&lt;-"</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'g'</span><span class="token punctuation">)</span>  <span class="token comment">#定义箭头</span>    mpl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span>  <span class="token comment"># 指定默认字体</span>    mpl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>  <span class="token comment"># 解决保存图像时负号'-'显示为方块的问题</span>    createPlot<span class="token punctuation">(</span>decision_tree<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#绘制决策树</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment"># 定义文本框和箭头格式</span>decisionNode <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>boxstyle<span class="token operator">=</span><span class="token string">"round4"</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'#3366FF'</span><span class="token punctuation">)</span>  <span class="token comment">#定义判断结点形态</span>leafNode <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>boxstyle<span class="token operator">=</span><span class="token string">"circle"</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'#FF6633'</span><span class="token punctuation">)</span>  <span class="token comment">#定义叶结点形态</span>arrow_args <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>arrowstyle<span class="token operator">=</span><span class="token string">"&lt;-"</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'g'</span><span class="token punctuation">)</span>  <span class="token comment">#定义箭头</span><span class="token comment">#绘制带箭头的注释</span><span class="token keyword">def</span> <span class="token function">plotNode</span><span class="token punctuation">(</span>nodeTxt<span class="token punctuation">,</span> centerPt<span class="token punctuation">,</span> parentPt<span class="token punctuation">,</span> nodeType<span class="token punctuation">)</span><span class="token punctuation">:</span>    createPlot<span class="token punctuation">.</span>ax1<span class="token punctuation">.</span>annotate<span class="token punctuation">(</span>nodeTxt<span class="token punctuation">,</span> xy<span class="token operator">=</span>parentPt<span class="token punctuation">,</span> xycoords<span class="token operator">=</span><span class="token string">'axes fraction'</span><span class="token punctuation">,</span>                            xytext<span class="token operator">=</span>centerPt<span class="token punctuation">,</span> textcoords<span class="token operator">=</span><span class="token string">'axes fraction'</span><span class="token punctuation">,</span>                            va<span class="token operator">=</span><span class="token string">"center"</span><span class="token punctuation">,</span> ha<span class="token operator">=</span><span class="token string">"center"</span><span class="token punctuation">,</span> bbox<span class="token operator">=</span>nodeType<span class="token punctuation">,</span> arrowprops<span class="token operator">=</span>arrow_args<span class="token punctuation">)</span><span class="token comment">#计算叶结点数</span><span class="token keyword">def</span> <span class="token function">getNumLeafs</span><span class="token punctuation">(</span>myTree<span class="token punctuation">)</span><span class="token punctuation">:</span>    numLeafs <span class="token operator">=</span> <span class="token number">0</span>    firstStr <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>myTree<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    secondDict <span class="token operator">=</span> myTree<span class="token punctuation">[</span>firstStr<span class="token punctuation">]</span>    <span class="token keyword">for</span> key <span class="token keyword">in</span> secondDict<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">type</span><span class="token punctuation">(</span>secondDict<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__name__ <span class="token operator">==</span> <span class="token string">'dict'</span><span class="token punctuation">:</span>            numLeafs <span class="token operator">+=</span> getNumLeafs<span class="token punctuation">(</span>secondDict<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            numLeafs <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> numLeafs<span class="token comment">#计算树的层数</span><span class="token keyword">def</span> <span class="token function">getTreeDepth</span><span class="token punctuation">(</span>myTree<span class="token punctuation">)</span><span class="token punctuation">:</span>    maxDepth <span class="token operator">=</span> <span class="token number">0</span>    firstStr <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>myTree<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    secondDict <span class="token operator">=</span> myTree<span class="token punctuation">[</span>firstStr<span class="token punctuation">]</span>    <span class="token keyword">for</span> key <span class="token keyword">in</span> secondDict<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">type</span><span class="token punctuation">(</span>secondDict<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__name__ <span class="token operator">==</span> <span class="token string">'dict'</span><span class="token punctuation">:</span>            thisDepth <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> getTreeDepth<span class="token punctuation">(</span>secondDict<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            thisDepth <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">if</span> thisDepth <span class="token operator">></span> maxDepth<span class="token punctuation">:</span>            maxDepth <span class="token operator">=</span> thisDepth    <span class="token keyword">return</span> maxDepth<span class="token comment">#在父子结点间填充文本信息</span><span class="token keyword">def</span> <span class="token function">plotMidText</span><span class="token punctuation">(</span>cntrPt<span class="token punctuation">,</span> parentPt<span class="token punctuation">,</span> txtString<span class="token punctuation">)</span><span class="token punctuation">:</span>    xMid <span class="token operator">=</span> <span class="token punctuation">(</span>parentPt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> cntrPt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span> <span class="token operator">+</span> cntrPt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    yMid <span class="token operator">=</span> <span class="token punctuation">(</span>parentPt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> cntrPt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span> <span class="token operator">+</span> cntrPt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    createPlot<span class="token punctuation">.</span>ax1<span class="token punctuation">.</span>text<span class="token punctuation">(</span>xMid<span class="token punctuation">,</span> yMid<span class="token punctuation">,</span> txtString<span class="token punctuation">,</span> va<span class="token operator">=</span><span class="token string">"center"</span><span class="token punctuation">,</span> ha<span class="token operator">=</span><span class="token string">"center"</span><span class="token punctuation">,</span> rotation<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">plotTree</span><span class="token punctuation">(</span>myTree<span class="token punctuation">,</span> parentPt<span class="token punctuation">,</span> nodeTxt<span class="token punctuation">)</span><span class="token punctuation">:</span>    numLeafs <span class="token operator">=</span> getNumLeafs<span class="token punctuation">(</span>myTree<span class="token punctuation">)</span>    depth <span class="token operator">=</span> getTreeDepth<span class="token punctuation">(</span>myTree<span class="token punctuation">)</span>    firstStr <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>myTree<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    cntrPt <span class="token operator">=</span> <span class="token punctuation">(</span>plotTree<span class="token punctuation">.</span>xOff <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">+</span> <span class="token builtin">float</span><span class="token punctuation">(</span>numLeafs<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span> <span class="token operator">/</span> plotTree<span class="token punctuation">.</span>totalW<span class="token punctuation">,</span> plotTree<span class="token punctuation">.</span>yOff<span class="token punctuation">)</span>    plotMidText<span class="token punctuation">(</span>cntrPt<span class="token punctuation">,</span> parentPt<span class="token punctuation">,</span> nodeTxt<span class="token punctuation">)</span>  <span class="token comment">#在父子结点间填充文本信息</span>    plotNode<span class="token punctuation">(</span>firstStr<span class="token punctuation">,</span> cntrPt<span class="token punctuation">,</span> parentPt<span class="token punctuation">,</span> decisionNode<span class="token punctuation">)</span>  <span class="token comment">#绘制带箭头的注释</span>    secondDict <span class="token operator">=</span> myTree<span class="token punctuation">[</span>firstStr<span class="token punctuation">]</span>    plotTree<span class="token punctuation">.</span>yOff <span class="token operator">=</span> plotTree<span class="token punctuation">.</span>yOff <span class="token operator">-</span> <span class="token number">1.0</span> <span class="token operator">/</span> plotTree<span class="token punctuation">.</span>totalD    <span class="token keyword">for</span> key <span class="token keyword">in</span> secondDict<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">type</span><span class="token punctuation">(</span>secondDict<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__name__ <span class="token operator">==</span> <span class="token string">'dict'</span><span class="token punctuation">:</span>            plotTree<span class="token punctuation">(</span>secondDict<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> cntrPt<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            plotTree<span class="token punctuation">.</span>xOff <span class="token operator">=</span> plotTree<span class="token punctuation">.</span>xOff <span class="token operator">+</span> <span class="token number">1.0</span> <span class="token operator">/</span> plotTree<span class="token punctuation">.</span>totalW            plotNode<span class="token punctuation">(</span>secondDict<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>plotTree<span class="token punctuation">.</span>xOff<span class="token punctuation">,</span> plotTree<span class="token punctuation">.</span>yOff<span class="token punctuation">)</span><span class="token punctuation">,</span> cntrPt<span class="token punctuation">,</span> leafNode<span class="token punctuation">)</span>            plotMidText<span class="token punctuation">(</span><span class="token punctuation">(</span>plotTree<span class="token punctuation">.</span>xOff<span class="token punctuation">,</span> plotTree<span class="token punctuation">.</span>yOff<span class="token punctuation">)</span><span class="token punctuation">,</span> cntrPt<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>    plotTree<span class="token punctuation">.</span>yOff <span class="token operator">=</span> plotTree<span class="token punctuation">.</span>yOff <span class="token operator">+</span> <span class="token number">1.0</span> <span class="token operator">/</span> plotTree<span class="token punctuation">.</span>totalD<span class="token keyword">def</span> <span class="token function">createPlot</span><span class="token punctuation">(</span>inTree<span class="token punctuation">)</span><span class="token punctuation">:</span>    fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> facecolor<span class="token operator">=</span><span class="token string">'white'</span><span class="token punctuation">)</span>    fig<span class="token punctuation">.</span>clf<span class="token punctuation">(</span><span class="token punctuation">)</span>    axprops <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>xticks<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> yticks<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    createPlot<span class="token punctuation">.</span>ax1 <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">,</span> frameon<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token operator">**</span>axprops<span class="token punctuation">)</span>    plotTree<span class="token punctuation">.</span>totalW <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>getNumLeafs<span class="token punctuation">(</span>inTree<span class="token punctuation">)</span><span class="token punctuation">)</span>    plotTree<span class="token punctuation">.</span>totalD <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>getTreeDepth<span class="token punctuation">(</span>inTree<span class="token punctuation">)</span><span class="token punctuation">)</span>    plotTree<span class="token punctuation">.</span>xOff <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0.5</span> <span class="token operator">/</span> plotTree<span class="token punctuation">.</span>totalW    plotTree<span class="token punctuation">.</span>yOff <span class="token operator">=</span> <span class="token number">1.0</span>    plotTree<span class="token punctuation">(</span>inTree<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>程序运行结果：<img src="D:/py_workspace/homework/DecisionTree/1.png" alt="ID3算法运行控制台输出" title="ID3算法运行控制台输出"><br>绘制出的决策树：<img src="D:/py_workspace/homework/DecisionTree/2.png" alt="决策树" title="使用matplotlib绘制的决策树"></p><h3 id="第八题"><a href="#第八题" class="headerlink" title="第八题"></a>第八题</h3><p>python源代码：<br><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#相较于ID3算法，CART算法并无本质上的区别，只是将选择最优特征的根据改为基尼系数</span><span class="token comment">#因此，修改原ID3算法中的计算信息熵函数为计算基尼系数函数，并同步修改选择最优特征函数即可</span><span class="token keyword">import</span> math<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> matplotlib<span class="token punctuation">.</span>pylab <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> treePlotter <span class="token keyword">import</span> createPlot<span class="token keyword">def</span> <span class="token function">calcGini</span><span class="token punctuation">(</span>dataSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    numEntries <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>dataSet<span class="token punctuation">)</span>    labelCounts <span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>     <span class="token keyword">for</span> featVec <span class="token keyword">in</span> dataSet<span class="token punctuation">:</span>        currentLabel <span class="token operator">=</span> featVec<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> currentLabel <span class="token keyword">not</span> <span class="token keyword">in</span> labelCounts<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            labelCounts<span class="token punctuation">[</span>currentLabel<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token number">0</span>        labelCounts<span class="token punctuation">[</span>currentLabel<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span>    Gini <span class="token operator">=</span><span class="token number">1.0</span>    <span class="token keyword">for</span> key <span class="token keyword">in</span> labelCounts<span class="token punctuation">:</span>        prob <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>labelCounts<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span>numEntries        Gini <span class="token operator">-=</span> prob <span class="token operator">*</span> prob    <span class="token keyword">return</span> Gini    <span class="token keyword">def</span> <span class="token function">SubDataset</span><span class="token punctuation">(</span>dataset<span class="token punctuation">,</span>index<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#从总的数据集中选取出关心的数据组成新的数据集</span>    sub_dataset <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> example <span class="token keyword">in</span> dataset<span class="token punctuation">:</span>        current_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> example<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> value<span class="token punctuation">:</span>            current_list <span class="token operator">=</span> example<span class="token punctuation">[</span><span class="token punctuation">:</span>index<span class="token punctuation">]</span>            current_list<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>example<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            sub_dataset<span class="token punctuation">.</span>append<span class="token punctuation">(</span>current_list<span class="token punctuation">)</span>    <span class="token keyword">return</span> sub_dataset<span class="token keyword">def</span> <span class="token function">splitOtherDataSetByValue</span><span class="token punctuation">(</span>dataSet<span class="token punctuation">,</span> index<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>    retDataSet <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> featVec <span class="token keyword">in</span> dataSet<span class="token punctuation">:</span>        <span class="token keyword">if</span> featVec<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">!=</span> value<span class="token punctuation">:</span>            reduceFeatVec <span class="token operator">=</span> featVec<span class="token punctuation">[</span><span class="token punctuation">:</span>index<span class="token punctuation">]</span>  <span class="token comment"># 删除这一维特征</span>            reduceFeatVec<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>featVec<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            retDataSet<span class="token punctuation">.</span>append<span class="token punctuation">(</span>reduceFeatVec<span class="token punctuation">)</span>    <span class="token keyword">return</span> retDataSet<span class="token keyword">def</span> <span class="token function">ChooseBestFeature</span><span class="token punctuation">(</span>dataSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    numFeatures <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>dataSet<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span>    bestGiniIndex <span class="token operator">=</span> <span class="token number">1000000.0</span>    bestSplictValue <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    bestFeature <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token comment"># 计算Gini指数</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>numFeatures<span class="token punctuation">)</span><span class="token punctuation">:</span>        featList <span class="token operator">=</span> <span class="token punctuation">[</span>example<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> example <span class="token keyword">in</span> dataSet<span class="token punctuation">]</span>               uniqueVals <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span>featList<span class="token punctuation">)</span>        bestGiniCut <span class="token operator">=</span> <span class="token number">1000000.0</span>        bestGiniCutValue <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        Gini_value <span class="token operator">=</span><span class="token number">0.0</span>                <span class="token keyword">for</span> value <span class="token keyword">in</span> uniqueVals<span class="token punctuation">:</span>                        subDataSet <span class="token operator">=</span> SubDataset<span class="token punctuation">(</span>dataSet<span class="token punctuation">,</span>i<span class="token punctuation">,</span>value<span class="token punctuation">)</span>            prob <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>subDataSet<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>dataSet<span class="token punctuation">)</span><span class="token punctuation">)</span>            Gini_value <span class="token operator">=</span> prob <span class="token operator">*</span> calcGini<span class="token punctuation">(</span>subDataSet<span class="token punctuation">)</span>                        otherDataSet <span class="token operator">=</span> splitOtherDataSetByValue<span class="token punctuation">(</span>dataSet<span class="token punctuation">,</span>i<span class="token punctuation">,</span>value<span class="token punctuation">)</span>            prob <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>otherDataSet<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>dataSet<span class="token punctuation">)</span><span class="token punctuation">)</span>            Gini_value <span class="token operator">=</span> Gini_value <span class="token operator">+</span> prob <span class="token operator">*</span> calcGini<span class="token punctuation">(</span>otherDataSet<span class="token punctuation">)</span>                       <span class="token keyword">if</span> Gini_value <span class="token operator">&lt;</span> bestGiniCut<span class="token punctuation">:</span>                bestGiniCut <span class="token operator">=</span> Gini_value                bestGiniCutValue <span class="token operator">=</span> value                GiniIndex <span class="token operator">=</span> bestGiniCut        <span class="token keyword">if</span> GiniIndex <span class="token operator">&lt;</span> bestGiniIndex<span class="token punctuation">:</span>            bestGiniIndex <span class="token operator">=</span> GiniIndex            bestSplictValue <span class="token operator">=</span> bestGiniCutValue            bestFeature <span class="token operator">=</span> i            <span class="token comment">#print(bestFeature,bestSplictValue)</span>        <span class="token keyword">return</span> bestFeature<span class="token keyword">def</span> <span class="token function">TreeGenerate</span><span class="token punctuation">(</span>dataset<span class="token punctuation">,</span>feature<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#通过递归调用创建决策树</span>    label_list<span class="token operator">=</span><span class="token punctuation">[</span>example<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> example <span class="token keyword">in</span> dataset<span class="token punctuation">]</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>label_list<span class="token punctuation">.</span>count<span class="token punctuation">(</span>label_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token builtin">len</span><span class="token punctuation">(</span>label_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#设置递归结束条件，类别中所有的标签都相同时，递归结束，返回一个叶节点</span>        <span class="token keyword">return</span> label_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>      best_index<span class="token operator">=</span>ChooseBestFeature<span class="token punctuation">(</span>dataset<span class="token punctuation">)</span>    best_feature<span class="token operator">=</span>feature<span class="token punctuation">[</span>best_index<span class="token punctuation">]</span>    decisionTree<span class="token operator">=</span><span class="token punctuation">&#123;</span>best_feature<span class="token punctuation">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">del</span><span class="token punctuation">(</span>feature<span class="token punctuation">[</span>best_index<span class="token punctuation">]</span><span class="token punctuation">)</span>    values_best_feature<span class="token operator">=</span><span class="token punctuation">[</span>example<span class="token punctuation">[</span>best_index<span class="token punctuation">]</span> <span class="token keyword">for</span> example <span class="token keyword">in</span> dataset<span class="token punctuation">]</span>    dict_value<span class="token operator">=</span><span class="token builtin">set</span><span class="token punctuation">(</span>values_best_feature<span class="token punctuation">)</span>    <span class="token keyword">for</span> value <span class="token keyword">in</span> dict_value<span class="token punctuation">:</span>        new_feature<span class="token operator">=</span>feature<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        decisionTree<span class="token punctuation">[</span>best_feature<span class="token punctuation">]</span><span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token operator">=</span>TreeGenerate<span class="token punctuation">(</span>SubDataset<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span>best_index<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span>new_feature<span class="token punctuation">)</span><span class="token comment">#递归调用自身不断生成子树</span>            <span class="token keyword">return</span> decisionTree<span class="token keyword">def</span> <span class="token function">GenerateDataset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     dataset <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'青年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'一般般'</span><span class="token punctuation">,</span> <span class="token string">'拒绝'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'青年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'好'</span><span class="token punctuation">,</span> <span class="token string">'拒绝'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'青年'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'好'</span><span class="token punctuation">,</span> <span class="token string">'同意'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'青年'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'一般般'</span><span class="token punctuation">,</span> <span class="token string">'同意'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'青年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'一般般'</span><span class="token punctuation">,</span> <span class="token string">'拒绝'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'中年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'一般般'</span><span class="token punctuation">,</span> <span class="token string">'拒绝'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'中年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'好'</span><span class="token punctuation">,</span> <span class="token string">'拒绝'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'中年'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'好'</span><span class="token punctuation">,</span> <span class="token string">'同意'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'中年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'非常好'</span><span class="token punctuation">,</span> <span class="token string">'同意'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'中年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'非常好'</span><span class="token punctuation">,</span> <span class="token string">'同意'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'老年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'非常好'</span><span class="token punctuation">,</span> <span class="token string">'同意'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'老年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'好'</span><span class="token punctuation">,</span> <span class="token string">'同意'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'老年'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'好'</span><span class="token punctuation">,</span> <span class="token string">'同意'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'老年'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'非常好'</span><span class="token punctuation">,</span> <span class="token string">'同意'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token string">'老年'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'一般般'</span><span class="token punctuation">,</span> <span class="token string">'拒绝'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    features <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'年龄'</span><span class="token punctuation">,</span> <span class="token string">'有工作'</span><span class="token punctuation">,</span> <span class="token string">'有房子'</span><span class="token punctuation">,</span> <span class="token string">'信贷情况'</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> dataset<span class="token punctuation">,</span> features<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    dataset<span class="token punctuation">,</span>feature<span class="token operator">=</span>GenerateDataset<span class="token punctuation">(</span><span class="token punctuation">)</span>    decision_tree<span class="token operator">=</span>TreeGenerate<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span>feature<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>decision_tree<span class="token punctuation">)</span>    <span class="token comment"># 定义文本框和箭头格式</span>    decisionNode <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>boxstyle<span class="token operator">=</span><span class="token string">"round4"</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'#3366FF'</span><span class="token punctuation">)</span>  <span class="token comment">#定义判断结点形态</span>    leafNode <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>boxstyle<span class="token operator">=</span><span class="token string">"circle"</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'#FF6633'</span><span class="token punctuation">)</span>  <span class="token comment">#定义叶结点形态</span>    arrow_args <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>arrowstyle<span class="token operator">=</span><span class="token string">"&lt;-"</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'g'</span><span class="token punctuation">)</span>  <span class="token comment">#定义箭头</span>    mpl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span>  <span class="token comment"># 指定默认字体</span>    mpl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>  <span class="token comment"># 解决保存图像时负号'-'显示为方块的问题</span>    createPlot<span class="token punctuation">(</span>decision_tree<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>程序运行结果：<img src="D:/py_workspace/homework/DecisionTree/3.png" alt="控制台输出结果" title="控制台输出结果"><br>matplotlib绘图结果：<img src="D:/py_workspace/homework/DecisionTree/4.png" alt="绘制决策树" title="使用matplotlib绘制决策树"></p><h1 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h1><h3 id="第一题-1"><a href="#第一题-1" class="headerlink" title="第一题"></a>第一题</h3><ul><li>Model1 <script type="math/tex; mode=display">TP=300,FN=80 ,TN=500 ,FP=60</script><script type="math/tex; mode=display">Acurracy=\frac{TP+TN}{TP+FN+TN+FP}=\frac{300+500}{300+80+500+60}=0.851</script><script type="math/tex; mode=display">Cost=300\times(-1)+80\times100+500\times0+60\times5=8000</script><script type="math/tex; mode=display">Recall=\frac{TP}{TP+FN}=\frac{300}{300+80}=0.789</script></li><li>Model2<script type="math/tex; mode=display">TP=500,FN=90,TN=400,FP=10</script><script type="math/tex; mode=display">Acurracy=\frac{TP+TN}{TP+FN+FP+TN}=\frac{500+400}{500+400+10+90}=0.9</script><script type="math/tex; mode=display">Cost=500\times(-1)+90\times100+400\times0+10\times5=8550</script><script type="math/tex; mode=display">Recall=\frac{TP}{TP+FN}=\frac{500}{500+90}=0.847</script></li></ul><h3 id="第二题-1"><a href="#第二题-1" class="headerlink" title="第二题"></a>第二题</h3><ul><li>1、当阈值增大时，样本中实际为正值的样本的个数不变，但是由于阈值的提高，可能导致一部分正例可能被误判为负例，即$TP+FN$的值不变，而$TP$的值可能变小，$Recall=\frac{TP}{TP+FN}$，所以，recall的值将可能不变或变小。</li><li>2、当阈值减小时，样本中实际为正值的样本的个数不变，但是由于阈值的减小，可能导致一部分本来被误判的正例被正确的判为正例，即$TP+FN$的值不变，而$TP$的值可能变大，$Recall=\frac{TP}{TP+FN}$，所以，recall的值将可能不变或变大。</li></ul><h3 id="第三题-1"><a href="#第三题-1" class="headerlink" title="第三题"></a>第三题</h3><p>ROC曲线即受试者工作特征曲线，其纵轴为TPR(True Positive Rate)，横轴为FPR(False Positive Rate)：</p><script type="math/tex; mode=display">TPR=\frac{TP}{TP+FN}</script><script type="math/tex; mode=display">FPR=\frac{FP}{FP+TN}</script><p>在ROC曲线中的每一个点都代表了一个分类器，而这个点的横纵坐标代表了这个分类器的性能。改变分类器的阈值，分类器所代表的点也在ROC曲线上移动。<br>ROC曲线的四个顶点$(0,0),(0,1),(1,0),(0,0)$；每个点都有特殊的含义：</p><ul><li>$(0,0)$点：即$FPR=TPR=0$，即$FP=TP=0$，可以发现该分类器预测所有的样本都为负样本;</li><li>$(0,1)$点：即$FPR=0,TPR=1$，即$TP=TP+FN，FN=FP=0$，且该分类器全部判断正确，是一种理想的分类器；</li><li>$(1,0)$点：即$FPR=1,TPR=0$，即$FP=FP+TN,TP=TN=0$，该分类器是最糟糕的分类器，所有的预测都是错误的；</li><li>$(1,1)$点：即$FPR=TPR=1$，$TN=FN=0$，可以发现，该分类器判断所有的样本都是正样本。<h3 id="第四题-1"><a href="#第四题-1" class="headerlink" title="第四题"></a>第四题</h3>$M_1$模型在大小为50的集合上进行测试，错误率$e_1=0.13$;<br>$M_2$模型在大小为4500的集合上进行测试，错误率$e_2=0.28$;<br>当测试集足够大时，可认为：<script type="math/tex; mode=display">e_1 \sim N(\mu_1, \sigma_1^2)</script><script type="math/tex; mode=display">e_2 \sim N(\mu_2, \sigma_2^2)</script>为了比较两个模型的性能是否有显著的统计学上的差异，令$d=e_1-e_2$，因为$e_1\sim N,e_2\sim N$,所以，$d\sim N(d_t,\sigma_t)$,由正态分布的性质：<script type="math/tex; mode=display">\sigma_t^2=\sigma_1^2+\sigma_2^2\approx\hat{\sigma_1^2}+\hat{\sigma_2^2}=\frac{e_1(1-e_1)}{n_1}+\frac{e_2(1-e_2)}{n_2}</script><script type="math/tex; mode=display">d_t=d\pm Z_{\frac{\alpha}{2}}\hat{\sigma_t}</script><script type="math/tex; mode=display">d=\lvert e_2-e_1 \rvert=0.28-0.13=0.15</script><script type="math/tex; mode=display">\hat{\sigma_d}=\frac{0.13(1-0.13)}{50}+\frac{0.28(1-0.28)}{4500}=0.0023</script>当置信水平为0.95时，$Z_\frac{\alpha}{2}=1.96$:<script type="math/tex; mode=display">d_t=0.15\pm 1.96\times \sqrt{0.0023}=0.15\pm 0.094</script>区间中不包含0，认为两者之间有差距，模型$M_1$的性能优于模型$M_2$的性能。<h3 id="第五题-1"><a href="#第五题-1" class="headerlink" title="第五题"></a>第五题</h3>在机器学习建模过程中，通行的做法通常是将数据分为训练集和测试集。测试集是与训练独立的数据，完全不参与训练，用于最终模型的评估。在训练过程中，经常会出现过拟合的问题，就是模型可以很好的匹配训练数据，却不能很好在预测训练集外的数据。如果此时就使用测试数据来调整模型参数，就相当于在训练时已知部分测试数据的信息，会影响最终评估结果的准确性。通常的做法是在训练数据再中分出一部分做为验证(Validation)数据，用来评估模型的训练效果。</li></ul><p>验证数据取自训练数据，但不参与训练，这样可以相对客观的评估模型对于训练集之外数据的匹配程度。模型在验证数据中的评估常用的是交叉验证，又称循环验证。它将原始数据分成K组(K-Fold)，将每个子集数据分别做一次验证集，其余的K-1组子集数据作为训练集，这样会得到K个模型。这K个模型分别在验证集中评估结果，最后的误差MSE(Mean Squared Error)加和平均就得到交叉验证误差。交叉验证有效利用了有限的数据，并且评估结果能够尽可能接近模型在测试集上的表现，可以做为模型优化的指标使用。<br><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> KFold<span class="token keyword">import</span> random<span class="token comment">#随机生成一百个(-20,20)的数字</span>num<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    num<span class="token punctuation">.</span>append<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#print(num)</span><span class="token comment">#使用k-fold方法对数据集进行划分</span>num<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>num<span class="token punctuation">)</span>kf<span class="token operator">=</span>KFold<span class="token punctuation">(</span>n_splits<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token keyword">for</span> train<span class="token punctuation">,</span>test <span class="token keyword">in</span> kf<span class="token punctuation">.</span>split<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    num_train<span class="token punctuation">,</span>num_test<span class="token operator">=</span>num<span class="token punctuation">[</span>train<span class="token punctuation">]</span><span class="token punctuation">,</span>num<span class="token punctuation">[</span>test<span class="token punctuation">]</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"训练集为："</span><span class="token punctuation">,</span>num_train<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"验证集为："</span><span class="token punctuation">,</span>num_test<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>程序运行结果：<img src="D:/py_workspace/homework/DecisionTree/5.png" alt="控制台输出结果" title="控制台输出结果"></p>]]></content>
      
      
      <categories>
          
          <category> 日常技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tech </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu16.04下载数据集的折腾</title>
      <link href="/2021/10/26/baidudisk/"/>
      <url>/2021/10/26/baidudisk/</url>
      
        <content type="html"><![CDATA[<p>最近在用实验室的服务器炼丹，被数据集折腾的够呛。别人的模型是用的ffhq集，这个数据集是开源的，但是部署在谷歌网盘上，<del>属于是开源了但没完全开</del>。<br>为了下载数据，最开始也是最直接的想法是在linux上折腾梯子。首选clash，没找到有图形化的窗口的项目。遂转用Qv2ray，在找教程的时候突然想到，如果有人把服务器的系统搞坏了（实验室比较穷，我需要和别人共用一台服务器），我这数据岂不是白白下载？于是决定直接在自己的电脑上下载，下载之后上传到百度网盘，这样也能为数据集做个备份，免得哪天被人rm\rf了。于是又在服务器上折腾百度网盘，首先去百度网盘官网下载deb包进行安装，安装成功了，但是打开之后就报错，可能百度没有为ubuntu16.04做适配。然后就打开万能的百度一下开始找<a href="https://www.jianshu.com/p/ac4a4399d99c">在ubuntu16.04上安装百度网盘的教程</a>，但是似乎阿里云镜像挂掉了。于是，百度网盘这条路也宣告破产。</p><p>这时，想起了服务器和自己的电脑用的是一个局域网，于是，想到可以使用scp命令传文件，应该比百度网盘下载还能快一些（但是数据还是要上传网盘做备份）。<br>scp语法：<br><pre class="line-numbers language-python" data-language="python"><code class="language-python">scp <span class="token punctuation">(</span>选项<span class="token punctuation">)</span> <span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>选项<br><pre class="line-numbers language-none"><code class="language-none">-1：使用ssh协议版本1；-2：使用ssh协议版本2；-4：使用ipv4；-6：使用ipv6；-B：以批处理模式运行；-C：使用压缩；-F：指定ssh配置文件；-i：identity_file 从指定文件中读取传输时使用的密钥文件（例如亚马逊云pem），此参数直接传递给ssh；-l：指定宽带限制；-o：指定使用的ssh选项；-P：指定远程主机的端口号；-p：保留文件的最后修改时间，最后访问时间和权限模式；-q：不显示复制进度；-r：以递归方式复制。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>在跨服务器文件传输中，用到的命令格式如下：<br><pre class="line-numbers language-none"><code class="language-none">scp &#x2F;opt&#x2F;1.rar(此处更改为你要上传至服务器的文件路径) 服务器名@服务器ip地址:&#x2F;opt(此处更改为你要在服务器上保存此文件的路径）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>从服务器向本地拉取文件的命令如下：<br><pre class="line-numbers language-none"><code class="language-none">scp &#x2F;opt(此处更改为你要在本地保存此文件的路径） 服务器名@服务器ip地址:&#x2F;opt&#x2F;1.rar(此处更改为你要拉取至本地的文件的路径)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>当然，要保证服务器和自己的电脑之间可以相互ping通。<br>亲测速度挺好的，问题解决~</p>]]></content>
      
      
      <categories>
          
          <category> 日常技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tech </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown基础语法练习</title>
      <link href="/2021/10/21/markdown-prictice/"/>
      <url>/2021/10/21/markdown-prictice/</url>
      
        <content type="html"><![CDATA[<p>使用vscode进行markdown文件编写，在vscode中有丰富的插件可以使用，推荐使用markdown preview插件，可同时预览.md文件的效果。</p><h1 id="标题练习"><a href="#标题练习" class="headerlink" title="标题练习"></a>标题练习</h1><h1 id="主标题"><a href="#主标题" class="headerlink" title="主标题"></a>主标题</h1><p>语法：主标题文字 空行 ====</p><h2 id="副标题"><a href="#副标题" class="headerlink" title="副标题"></a>副标题</h2><p>语法：副标题文字 空行 ——</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><p>语法： #（有几个#号就是几级标题）标题文字</p><h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><p>语法： TAGS/标签：内容</p><p>标签: 练习 markdown语法</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>语法: 在段落中填写 [TOC] （toc小写也可以）以显示各标题为结构的目录（大纲）导航。</p><p>[toc]</p><h1 id="斜体，粗体，删除线，分栏线"><a href="#斜体，粗体，删除线，分栏线" class="headerlink" title="斜体，粗体，删除线，分栏线"></a>斜体，粗体，删除线，分栏线</h1><h1 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a>粗体</h1><p>语法： 在文字两端加双下底线或双星号<br><strong>粗体文字示范</strong></p><h1 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h1><p>语法： 在文字两端加单下底线或单星号<br><em>斜体文字示范</em></p><h1 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h1><p>语法： 在文字两端加双波浪号<br><del>删除线示范</del></p><h1 id="分栏线"><a href="#分栏线" class="headerlink" title="分栏线"></a>分栏线</h1><p>语法： 在空白行下方添加三条—-横线</p><hr>]]></content>
      
      
      <categories>
          
          <category> 日常技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tech </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>祝我自己生日快乐/博客开张纪念</title>
      <link href="/2021/10/21/happybirthday/"/>
      <url>/2021/10/21/happybirthday/</url>
      
        <content type="html"><![CDATA[<p>21岁了。  </p><p>今天就是21岁的第一天。很难想象之后的日子就是朝着三十岁大步流星头也不回的猛冲。彷佛还在去年生日的第一天，还在考研的压力下苦苦的与失眠和蚊子作斗争。寒来暑往，四序迁流。彷佛真的就是在弹指一挥间。  </p><p>从20岁到21岁，从南京到西安，从本科生到研究生，也算是生命中很重要的转折之一了吧。前段时间在网上查资料，看了很多大佬的技术博客都放在自己的个人博客里边。后来就稍微关注了一下这方面的技术。发现搭建一个个人主页的成本似乎并不是很高，需要的入门技术也不是很复杂。于是，就买了自己的域名，使用git pages+hexo的技术方案初步搭建了自己的主页，算是给自己的生日礼物吧。</p><p>这个主页内容用了很短的时间来折腾，大多数东西都直接采用了matery主题的框架，还有很多功能目前没有实现。以后会继续折腾，受制于个人审美能力的原因，应该也是在matery或者其他主题的框架下继续魔改吧。个人博客以后主要会用来记录自己的技术学习笔记，也会有一些个人生活分享。</p><p>你我皆凡人，生在人世间。终日奔波苦，一刻不得闲。没有人是世界的中心。平凡的生活，也有被记录下来的价值。记录自己的生活，包括技术生活和日常生活，给自己一个从旁观者的角度来看自己的生活的机会，这就是这个博客最大的意义，也是给自己最好的生日礼物。</p>]]></content>
      
      
      <categories>
          
          <category> 日日谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> normaldays </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
